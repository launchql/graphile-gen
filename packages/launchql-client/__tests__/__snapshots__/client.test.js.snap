// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`create 1`] = `
"mutation createActionMutation($name: String, $photo: JSON, $title: String, $description: String, $locationRadius: BigFloat, $url: String, $timeRequired: BigFloat, $startDate: Datetime, $endDate: Datetime, $approved: Boolean, $rewardAmount: BigFloat, $activityFeedText: String, $callToAction: String, $completedActionText: String, $descriptionHeader: String, $tags: [String], $locationId: UUID, $ownerId: UUID!, $photoUpload: Upload) {
  createAction(input: {action: {name: $name, photo: $photo, title: $title, description: $description, locationRadius: $locationRadius, url: $url, timeRequired: $timeRequired, startDate: $startDate, endDate: $endDate, approved: $approved, rewardAmount: $rewardAmount, activityFeedText: $activityFeedText, callToAction: $callToAction, completedActionText: $completedActionText, descriptionHeader: $descriptionHeader, tags: $tags, locationId: $locationId, ownerId: $ownerId, photoUpload: $photoUpload}}) {
    action {
      id
      name
      photo
      title
    }
  }
}
"
`;

exports[`create 2`] = `"createActionMutation"`;

exports[`delete 1`] = `
"mutation deleteActionMutation($id: UUID!) {
  deleteAction(input: {id: $id}) {
    clientMutationId
  }
}
"
`;

exports[`delete 2`] = `"deleteActionMutation"`;

exports[`getAll 1`] = `
"query getActionsQueryAll {
  actions {totalCount, nodes {
    id
    name
    photo
    title
    actionResults(first: 10, before: null, filter: {name: {in: [\\"abc\\", \\"def\\"]}, actionId: {equalTo: \\"dc310161-7a42-4b93-6a56-9fa48adcad7e\\"}}) {nodes {
      id
      actionId
    }}
  }}
}
"
`;

exports[`getAll 2`] = `"getActionsQueryAll"`;

exports[`getMany edges 1`] = `
"query getActionsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: ActionCondition, $filter: ActionFilter, $orderBy: [ActionsOrderBy!]) {
  actions(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, edges {
    cursor
    node {
      id
      name
      photo
      title
      actionResults(first: 10, before: null, filter: {name: {in: [\\"abc\\", \\"def\\"]}, actionId: {equalTo: \\"dc310161-7a42-4b93-6a56-9fa48adcad7e\\"}}) {nodes {
        id
        actionId
      }}
    }
  }}
}
"
`;

exports[`getMany edges 2`] = `"getActionsQuery"`;

exports[`getMany should select only scalar fields by default 1`] = `
"query getActionsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: ActionCondition, $filter: ActionFilter, $orderBy: [ActionsOrderBy!]) {
  actions(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    name
    photo
    title
    description
    locationRadius
    url
    timeRequired
    startDate
    endDate
    approved
    rewardAmount
    activityFeedText
    callToAction
    completedActionText
    descriptionHeader
    tags
    createdBy
    updatedBy
    createdAt
    updatedAt
    locationId
    actionResults
    actionItems
    userActions
    userActionResults
    userActionItems
  }}
}
"
`;

exports[`getMany should select only scalar fields by default 2`] = `"getActionsQuery"`;

exports[`getMany should whitelist selected fields 1`] = `
"query getActionsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: ActionCondition, $filter: ActionFilter, $orderBy: [ActionsOrderBy!]) {
  actions(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    name
    photo
    title
    actionResults(first: 10, filter: {name: {in: [\\"abc\\", \\"def\\"]}, actionId: {equalTo: \\"dc310161-7a42-4b93-6a56-9fa48adcad7e\\"}}) {nodes {
      id
      actionId
    }}
  }}
}
"
`;

exports[`getMany should whitelist selected fields 2`] = `"getActionsQuery"`;

exports[`getOne 1`] = `
"query getActionQuery($id: UUID!) {
  action(id: $id) {
    id
    name
    photo
    title
    actionResults(first: 10, before: null, filter: {name: {in: [\\"abc\\", \\"def\\"]}, actionId: {equalTo: \\"dc310161-7a42-4b93-6a56-9fa48adcad7e\\"}}) {nodes {
      id
      actionId
    }}
  }
}
"
`;

exports[`getOne 2`] = `"getActionQuery"`;

exports[`update 1`] = `
"mutation updateActionMutation($name: String, $photo: JSON, $title: String, $description: String, $locationRadius: BigFloat, $url: String, $timeRequired: BigFloat, $startDate: Datetime, $endDate: Datetime, $approved: Boolean, $rewardAmount: BigFloat, $activityFeedText: String, $callToAction: String, $completedActionText: String, $descriptionHeader: String, $tags: [String], $locationId: UUID, $ownerId: UUID, $photoUpload: Upload) {
  updateAction(input: {id: $id, patch: {name: $name, photo: $photo, title: $title, description: $description, locationRadius: $locationRadius, url: $url, timeRequired: $timeRequired, startDate: $startDate, endDate: $endDate, approved: $approved, rewardAmount: $rewardAmount, activityFeedText: $activityFeedText, callToAction: $callToAction, completedActionText: $completedActionText, descriptionHeader: $descriptionHeader, tags: $tags, locationId: $locationId, ownerId: $ownerId, photoUpload: $photoUpload}}) {
    action {
      id
      name
      photo
      title
    }
  }
}
"
`;

exports[`update 2`] = `"updateActionMutation"`;
