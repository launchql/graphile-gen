// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`create with custom selection 1`] = `
"mutation createActionMutation($slug: String, $photo: JSON, $title: String, $url: String, $description: String, $discoveryHeader: String, $discoveryDescription: String, $enableNotifications: Boolean, $enableNotificationsText: String, $search: FullText, $location: GeoJSON, $locationRadius: BigFloat, $timeRequired: IntervalInput, $startDate: Datetime, $endDate: Datetime, $approved: Boolean, $rewardAmount: BigFloat, $activityFeedText: String, $callToAction: String, $completedActionText: String, $alreadyCompletedActionText: String, $tags: [String], $ownerId: UUID!, $photoUpload: Upload) {
  createAction(input: {action: {slug: $slug, photo: $photo, title: $title, url: $url, description: $description, discoveryHeader: $discoveryHeader, discoveryDescription: $discoveryDescription, enableNotifications: $enableNotifications, enableNotificationsText: $enableNotificationsText, search: $search, location: $location, locationRadius: $locationRadius, timeRequired: $timeRequired, startDate: $startDate, endDate: $endDate, approved: $approved, rewardAmount: $rewardAmount, activityFeedText: $activityFeedText, callToAction: $callToAction, completedActionText: $completedActionText, alreadyCompletedActionText: $alreadyCompletedActionText, tags: $tags, ownerId: $ownerId, photoUpload: $photoUpload}}) {
    action {
      id
      photo
      title
    }
  }
}
"
`;

exports[`create with custom selection 2`] = `"createActionMutation"`;

exports[`create with default scalar selection 1`] = `
"mutation createActionMutation($slug: String, $photo: JSON, $title: String, $url: String, $description: String, $discoveryHeader: String, $discoveryDescription: String, $enableNotifications: Boolean, $enableNotificationsText: String, $search: FullText, $location: GeoJSON, $locationRadius: BigFloat, $timeRequired: IntervalInput, $startDate: Datetime, $endDate: Datetime, $approved: Boolean, $rewardAmount: BigFloat, $activityFeedText: String, $callToAction: String, $completedActionText: String, $alreadyCompletedActionText: String, $tags: [String], $ownerId: UUID!, $photoUpload: Upload) {
  createAction(input: {action: {slug: $slug, photo: $photo, title: $title, url: $url, description: $description, discoveryHeader: $discoveryHeader, discoveryDescription: $discoveryDescription, enableNotifications: $enableNotifications, enableNotificationsText: $enableNotificationsText, search: $search, location: $location, locationRadius: $locationRadius, timeRequired: $timeRequired, startDate: $startDate, endDate: $endDate, approved: $approved, rewardAmount: $rewardAmount, activityFeedText: $activityFeedText, callToAction: $callToAction, completedActionText: $completedActionText, alreadyCompletedActionText: $alreadyCompletedActionText, tags: $tags, ownerId: $ownerId, photoUpload: $photoUpload}}) {
    action {
      id
      slug
      photo
      title
      url
      description
      discoveryHeader
      discoveryDescription
      enableNotifications
      enableNotificationsText
      search
      locationRadius
      startDate
      endDate
      approved
      rewardAmount
      activityFeedText
      callToAction
      completedActionText
      alreadyCompletedActionText
      tags
      createdBy
      updatedBy
      createdAt
      updatedAt
    }
  }
}
"
`;

exports[`create with default scalar selection 2`] = `"createActionMutation"`;

exports[`delete 1`] = `
"mutation deleteActionBySlugMutation($slug: String!) {
  deleteActionBySlug(input: {slug: $slug}) {
    clientMutationId
  }
}
"
`;

exports[`delete 2`] = `"deleteActionBySlugMutation"`;

exports[`getAll 1`] = `
"query getActionsQueryAll {
  actions {totalCount, nodes {
    id
    photo
    title
    actionResults(first: 10, before: null, filter: {name: {in: [\\"abc\\", \\"def\\"]}, actionId: {equalTo: \\"dc310161-7a42-4b93-6a56-9fa48adcad7e\\"}}) {totalCount, nodes {
      id
      actionId
    }}
  }}
}
"
`;

exports[`getAll 2`] = `"getActionsQueryAll"`;

exports[`getMany edges 1`] = `
"query getActionsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: ActionCondition, $filter: ActionFilter, $orderBy: [ActionsOrderBy!]) {
  actions(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, edges {
    cursor
    node {
      id
      photo
      title
      actionResults(first: 10, before: null, filter: {name: {in: [\\"abc\\", \\"def\\"]}, actionId: {equalTo: \\"dc310161-7a42-4b93-6a56-9fa48adcad7e\\"}}) {totalCount, nodes {
        id
        actionId
      }}
    }
  }}
}
"
`;

exports[`getMany edges 2`] = `"getActionsQuery"`;

exports[`getMany should select only scalar fields by default 1`] = `
"query getActionsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: ActionCondition, $filter: ActionFilter, $orderBy: [ActionsOrderBy!]) {
  actions(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    slug
    photo
    title
    url
    description
    discoveryHeader
    discoveryDescription
    enableNotifications
    enableNotificationsText
    search
    locationRadius
    startDate
    endDate
    approved
    rewardAmount
    activityFeedText
    callToAction
    completedActionText
    alreadyCompletedActionText
    tags
    createdBy
    updatedBy
    createdAt
    updatedAt
  }}
}
"
`;

exports[`getMany should select only scalar fields by default 2`] = `"getActionsQuery"`;

exports[`getMany should whitelist selected fields 1`] = `
"query getActionsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: ActionCondition, $filter: ActionFilter, $orderBy: [ActionsOrderBy!]) {
  actions(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    photo
    title
    actionResults(first: 10, filter: {name: {in: [\\"abc\\", \\"def\\"]}, actionId: {equalTo: \\"dc310161-7a42-4b93-6a56-9fa48adcad7e\\"}}) {totalCount, nodes {
      id
      actionId
    }}
  }}
}
"
`;

exports[`getMany should whitelist selected fields 2`] = `"getActionsQuery"`;

exports[`getOne 1`] = `
"query getActionQuery($id: UUID!) {
  action(id: $id) {
    id
    photo
    title
    actionResults(first: 10, before: null, filter: {name: {in: [\\"abc\\", \\"def\\"]}, actionId: {equalTo: \\"dc310161-7a42-4b93-6a56-9fa48adcad7e\\"}}) {totalCount, nodes {
      id
      actionId
    }}
  }
}
"
`;

exports[`getOne 2`] = `"getActionQuery"`;

exports[`selects all scalar fields of junction table by default 1`] = `
"query getActionGoalsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: ActionGoalCondition, $filter: ActionGoalFilter, $orderBy: [ActionGoalsOrderBy!]) {
  actionGoals(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    createdBy
    updatedBy
    createdAt
    updatedAt
    actionId
    goalId
  }}
}
"
`;

exports[`selects belongsTo relation field 1`] = `
"query getActionsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: ActionCondition, $filter: ActionFilter, $orderBy: [ActionsOrderBy!]) {
  actions(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    owner {
      id
      type
    }
  }}
}
"
`;

exports[`selects non-scalar custom types 1`] = `"getActionsQuery"`;

exports[`selects relation field 1`] = `
"query getActionsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: ActionCondition, $filter: ActionFilter, $orderBy: [ActionsOrderBy!]) {
  actions(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    slug
    photo
    title
    url
    goals(first: 3) {totalCount, nodes {
      id
      name
      slug
      shortName
      icon
      subHead
      tags
      search
      createdBy
      updatedBy
      createdAt
      updatedAt
    }}
  }}
}
"
`;

exports[`should select totalCount in subfields by default 1`] = `
"query getActionsQuery($first: Int, $last: Int, $after: Cursor, $before: Cursor, $offset: Int, $condition: ActionCondition, $filter: ActionFilter, $orderBy: [ActionsOrderBy!]) {
  actions(first: $first, last: $last, offset: $offset, after: $after, before: $before, condition: $condition, filter: $filter, orderBy: $orderBy) {totalCount, pageInfo {
    hasNextPage
    hasPreviousPage
    endCursor
    startCursor
  }, nodes {
    id
    photo
    title
    actionResults(first: 10, filter: {name: {in: [\\"abc\\", \\"def\\"]}, actionId: {equalTo: \\"dc310161-7a42-4b93-6a56-9fa48adcad7e\\"}}) {totalCount, nodes {
      id
      actionId
    }}
  }}
}
"
`;

exports[`should select totalCount in subfields by default 2`] = `"getActionsQuery"`;

exports[`update with custom selection 1`] = `
"mutation updateActionBySlugMutation($slug: String!, $photo: JSON, $title: String, $url: String, $description: String, $discoveryHeader: String, $discoveryDescription: String, $enableNotifications: Boolean, $enableNotificationsText: String, $search: FullText, $location: GeoJSON, $locationRadius: BigFloat, $timeRequired: IntervalInput, $startDate: Datetime, $endDate: Datetime, $approved: Boolean, $rewardAmount: BigFloat, $activityFeedText: String, $callToAction: String, $completedActionText: String, $alreadyCompletedActionText: String, $tags: [String], $ownerId: UUID, $photoUpload: Upload) {
  updateActionBySlug(input: {slug: $slug, patch: {photo: $photo, title: $title, url: $url, description: $description, discoveryHeader: $discoveryHeader, discoveryDescription: $discoveryDescription, enableNotifications: $enableNotifications, enableNotificationsText: $enableNotificationsText, search: $search, location: $location, locationRadius: $locationRadius, timeRequired: $timeRequired, startDate: $startDate, endDate: $endDate, approved: $approved, rewardAmount: $rewardAmount, activityFeedText: $activityFeedText, callToAction: $callToAction, completedActionText: $completedActionText, alreadyCompletedActionText: $alreadyCompletedActionText, tags: $tags, ownerId: $ownerId, photoUpload: $photoUpload}}) {
    action {
      id
      photo
      title
    }
  }
}
"
`;

exports[`update with custom selection 2`] = `"updateActionBySlugMutation"`;

exports[`update with default scalar selection 1`] = `
"mutation updateActionBySlugMutation($slug: String!, $photo: JSON, $title: String, $url: String, $description: String, $discoveryHeader: String, $discoveryDescription: String, $enableNotifications: Boolean, $enableNotificationsText: String, $search: FullText, $location: GeoJSON, $locationRadius: BigFloat, $timeRequired: IntervalInput, $startDate: Datetime, $endDate: Datetime, $approved: Boolean, $rewardAmount: BigFloat, $activityFeedText: String, $callToAction: String, $completedActionText: String, $alreadyCompletedActionText: String, $tags: [String], $ownerId: UUID, $photoUpload: Upload) {
  updateActionBySlug(input: {slug: $slug, patch: {photo: $photo, title: $title, url: $url, description: $description, discoveryHeader: $discoveryHeader, discoveryDescription: $discoveryDescription, enableNotifications: $enableNotifications, enableNotificationsText: $enableNotificationsText, search: $search, location: $location, locationRadius: $locationRadius, timeRequired: $timeRequired, startDate: $startDate, endDate: $endDate, approved: $approved, rewardAmount: $rewardAmount, activityFeedText: $activityFeedText, callToAction: $callToAction, completedActionText: $completedActionText, alreadyCompletedActionText: $alreadyCompletedActionText, tags: $tags, ownerId: $ownerId, photoUpload: $photoUpload}}) {
    action {
      id
      slug
      photo
      title
      url
      description
      discoveryHeader
      discoveryDescription
      enableNotifications
      enableNotificationsText
      search
      locationRadius
      startDate
      endDate
      approved
      rewardAmount
      activityFeedText
      callToAction
      completedActionText
      alreadyCompletedActionText
      tags
      createdBy
      updatedBy
      createdAt
      updatedAt
    }
  }
}
"
`;

exports[`update with default scalar selection 2`] = `"updateActionBySlugMutation"`;
