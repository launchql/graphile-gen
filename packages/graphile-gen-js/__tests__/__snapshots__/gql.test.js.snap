// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`works 1`] = `
Object {
  "apiToken": "export const apiToken = gql\`
    query apiTokenQuery($id: UUID!) {
      apiToken(id: $id) {
        id
        userId
        accessToken
        accessTokenExpiresAt
      }
    }\`;",
  "apiTokenByAccessToken": "export const apiTokenByAccessToken = gql\`
    query apiTokenByAccessTokenQuery($accessToken: String!) {
      apiTokenByAccessToken(accessToken: $accessToken) {
        id
        userId
        accessToken
        accessTokenExpiresAt
      }
    }\`;",
  "apiTokens": "export const apiTokens = gql\`
    query apiTokensQuery {
      apiTokens {totalCount, nodes: {
        id
        userId
        accessToken
        accessTokenExpiresAt
      }}
    }\`;",
  "article": "export const article = gql\`
    query articleQuery($id: UUID!) {
      article(id: $id) {
        id
        header
        url
        image
        datePublished
        ownerId
        createdBy
        updatedBy
        createdAt
        updatedAt
      }
    }\`;",
  "articles": "export const articles = gql\`
    query articlesQuery {
      articles {totalCount, nodes: {
        id
        header
        url
        image
        datePublished
        ownerId
        createdBy
        updatedBy
        createdAt
        updatedAt
      }}
    }\`;",
  "campaign": "export const campaign = gql\`
    query campaignQuery($id: UUID!) {
      campaign(id: $id) {
        id
        name
        description
        startDate
        endDate
        createdBy
        updatedBy
        createdAt
        updatedAt
        partnerId
        logoId
        backgroundImageId
        partner
        logo
        backgroundImage
        campaignActions
      }
    }\`;",
  "campaignAction": "export const campaignAction = gql\`
    query campaignActionQuery($id: UUID!) {
      campaignAction(id: $id) {
        id
        name
        description
        rewardUnit
        rewardAmount
        totalBitcoinLimit
        actionWeeklyLimit
        actionDailyLimit
        userTotalLimit
        userWeeklyLimit
        userDailyLimit
        startDate
        endDate
        createdBy
        updatedBy
        createdAt
        updatedAt
        campaignId
        partnerId
        thumbnailId
        campaign
        partner
        thumbnail
        completedActionsByActionId
        services
        initiativesPyraRecordsByActionId
      }
    }\`;",
  "campaignActionByName": "export const campaignActionByName = gql\`
    query campaignActionByNameQuery($name: String!) {
      campaignActionByName(name: $name) {
        id
        name
        description
        rewardUnit
        rewardAmount
        totalBitcoinLimit
        actionWeeklyLimit
        actionDailyLimit
        userTotalLimit
        userWeeklyLimit
        userDailyLimit
        startDate
        endDate
        createdBy
        updatedBy
        createdAt
        updatedAt
        campaignId
        partnerId
        thumbnailId
        campaign
        partner
        thumbnail
        completedActionsByActionId
        services
        initiativesPyraRecordsByActionId
      }
    }\`;",
  "campaignActions": "export const campaignActions = gql\`
    query campaignActionsQuery {
      campaignActions {totalCount, nodes: {
        id
        name
        description
        rewardUnit
        rewardAmount
        totalBitcoinLimit
        actionWeeklyLimit
        actionDailyLimit
        userTotalLimit
        userWeeklyLimit
        userDailyLimit
        startDate
        endDate
        createdBy
        updatedBy
        createdAt
        updatedAt
        campaignId
        partnerId
        thumbnailId
        campaign
        partner
        thumbnail
        completedActionsByActionId
        services
        initiativesPyraRecordsByActionId
      }}
    }\`;",
  "campaigns": "export const campaigns = gql\`
    query campaignsQuery {
      campaigns {totalCount, nodes: {
        id
        name
        description
        startDate
        endDate
        createdBy
        updatedBy
        createdAt
        updatedAt
        partnerId
        logoId
        backgroundImageId
        partner
        logo
        backgroundImage
        campaignActions
      }}
    }\`;",
  "completedAction": "export const completedAction = gql\`
    query completedActionQuery($id: UUID!) {
      completedAction(id: $id) {
        id
        dateCompleted
        txid
        createdBy
        updatedBy
        createdAt
        updatedAt
        userId
        actionId
        user
        action
      }
    }\`;",
  "completedActions": "export const completedActions = gql\`
    query completedActionsQuery {
      completedActions {totalCount, nodes: {
        id
        dateCompleted
        txid
        createdBy
        updatedBy
        createdAt
        updatedAt
        userId
        actionId
        user
        action
      }}
    }\`;",
  "createApiToken": "export const createApiToken = gql\`
    mutation createApiTokenMutation($id: UUID, $userId: UUID!, $accessToken: String, $accessTokenExpiresAt: Datetime) {
      createApiToken(input: {apiToken: {id: $id, userId: $userId, accessToken: $accessToken, accessTokenExpiresAt: $accessTokenExpiresAt}}) {
        apiToken {
          id
          userId
          accessToken
          accessTokenExpiresAt
        }
      }
    }\`;",
  "createArticle": "export const createArticle = gql\`
    mutation createArticleMutation($id: UUID, $header: String, $url: String, $image: String, $datePublished: Datetime, $ownerId: UUID!, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime) {
      createArticle(input: {article: {id: $id, header: $header, url: $url, image: $image, datePublished: $datePublished, ownerId: $ownerId, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt}}) {
        article {
          id
          header
          url
          image
          datePublished
          ownerId
          createdBy
          updatedBy
          createdAt
          updatedAt
        }
      }
    }\`;",
  "createCampaign": "export const createCampaign = gql\`
    mutation createCampaignMutation($id: UUID, $name: String, $description: String, $startDate: Datetime, $endDate: Datetime, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $partnerId: UUID!, $logoId: UUID, $backgroundImageId: UUID) {
      createCampaign(input: {campaign: {id: $id, name: $name, description: $description, startDate: $startDate, endDate: $endDate, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, partnerId: $partnerId, logoId: $logoId, backgroundImageId: $backgroundImageId}}) {
        campaign {
          id
          name
          description
          startDate
          endDate
          createdBy
          updatedBy
          createdAt
          updatedAt
          partnerId
          logoId
          backgroundImageId
        }
      }
    }\`;",
  "createCampaignAction": "export const createCampaignAction = gql\`
    mutation createCampaignActionMutation($id: UUID, $name: String!, $description: String, $rewardUnit: String, $rewardAmount: BigFloat, $totalBitcoinLimit: BigFloat, $actionWeeklyLimit: Int, $actionDailyLimit: Int, $userTotalLimit: Int, $userWeeklyLimit: Int, $userDailyLimit: Int, $startDate: Datetime, $endDate: Datetime, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $campaignId: UUID!, $partnerId: UUID!, $thumbnailId: UUID) {
      createCampaignAction(input: {campaignAction: {id: $id, name: $name, description: $description, rewardUnit: $rewardUnit, rewardAmount: $rewardAmount, totalBitcoinLimit: $totalBitcoinLimit, actionWeeklyLimit: $actionWeeklyLimit, actionDailyLimit: $actionDailyLimit, userTotalLimit: $userTotalLimit, userWeeklyLimit: $userWeeklyLimit, userDailyLimit: $userDailyLimit, startDate: $startDate, endDate: $endDate, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, campaignId: $campaignId, partnerId: $partnerId, thumbnailId: $thumbnailId}}) {
        campaignAction {
          id
          name
          description
          rewardUnit
          rewardAmount
          totalBitcoinLimit
          actionWeeklyLimit
          actionDailyLimit
          userTotalLimit
          userWeeklyLimit
          userDailyLimit
          startDate
          endDate
          createdBy
          updatedBy
          createdAt
          updatedAt
          campaignId
          partnerId
          thumbnailId
        }
      }
    }\`;",
  "createCompletedAction": "export const createCompletedAction = gql\`
    mutation createCompletedActionMutation($id: UUID, $dateCompleted: Datetime, $txid: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $userId: UUID!, $actionId: UUID!) {
      createCompletedAction(input: {completedAction: {id: $id, dateCompleted: $dateCompleted, txid: $txid, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, userId: $userId, actionId: $actionId}}) {
        completedAction {
          id
          dateCompleted
          txid
          createdBy
          updatedBy
          createdAt
          updatedAt
          userId
          actionId
        }
      }
    }\`;",
  "createImage": "export const createImage = gql\`
    mutation createImageMutation($id: UUID, $name: String, $url: String, $versions: JSON, $versions2: JSON, $versions3: JSON!, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime) {
      createImage(input: {image: {id: $id, name: $name, url: $url, versions: $versions, versions2: $versions2, versions3: $versions3, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt}}) {
        image {
          id
          name
          url
          versions
          versions2
          versions3
          createdBy
          updatedBy
          createdAt
          updatedAt
        }
      }
    }\`;",
  "createInitiativesPyraRecord": "export const createInitiativesPyraRecord = gql\`
    mutation createInitiativesPyraRecordMutation($id: UUID, $name: String, $email: String, $bitcoinAddress: String, $date: Datetime, $actionsCompleted: Int, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $actionId: UUID!) {
      createInitiativesPyraRecord(input: {initiativesPyraRecord: {id: $id, name: $name, email: $email, bitcoinAddress: $bitcoinAddress, date: $date, actionsCompleted: $actionsCompleted, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, actionId: $actionId}}) {
        initiativesPyraRecord {
          id
          name
          email
          bitcoinAddress
          date
          actionsCompleted
          createdBy
          updatedBy
          createdAt
          updatedAt
          actionId
        }
      }
    }\`;",
  "createMerchant": "export const createMerchant = gql\`
    mutation createMerchantMutation($id: UUID, $name: String, $bitcoinAddress: String, $description: String, $ownerId: UUID!, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $logoId: UUID, $backgroundImageId: UUID) {
      createMerchant(input: {merchant: {id: $id, name: $name, bitcoinAddress: $bitcoinAddress, description: $description, ownerId: $ownerId, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, logoId: $logoId, backgroundImageId: $backgroundImageId}}) {
        merchant {
          id
          name
          bitcoinAddress
          description
          ownerId
          createdBy
          updatedBy
          createdAt
          updatedAt
          logoId
          backgroundImageId
        }
      }
    }\`;",
  "createPartner": "export const createPartner = gql\`
    mutation createPartnerMutation($id: UUID, $name: String, $description: String, $bitcoinAddress: String, $ownerId: UUID!, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $logoId: UUID, $backgroundImageId: UUID) {
      createPartner(input: {partner: {id: $id, name: $name, description: $description, bitcoinAddress: $bitcoinAddress, ownerId: $ownerId, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, logoId: $logoId, backgroundImageId: $backgroundImageId}}) {
        partner {
          id
          name
          description
          bitcoinAddress
          ownerId
          createdBy
          updatedBy
          createdAt
          updatedAt
          logoId
          backgroundImageId
        }
      }
    }\`;",
  "createPermission": "export const createPermission = gql\`
    mutation createPermissionMutation($id: UUID, $name: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $userId: UUID!) {
      createPermission(input: {permission: {id: $id, name: $name, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, userId: $userId}}) {
        permission {
          id
          name
          createdBy
          updatedBy
          createdAt
          updatedAt
          userId
        }
      }
    }\`;",
  "createProduct": "export const createProduct = gql\`
    mutation createProductMutation($id: UUID, $name: String, $url: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $merchantId: UUID!, $iconId: UUID) {
      createProduct(input: {product: {id: $id, name: $name, url: $url, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, merchantId: $merchantId, iconId: $iconId}}) {
        product {
          id
          name
          url
          createdBy
          updatedBy
          createdAt
          updatedAt
          merchantId
          iconId
        }
      }
    }\`;",
  "createService": "export const createService = gql\`
    mutation createServiceMutation($id: UUID, $name: String, $description: String, $type: String, $data: JSON, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $campaignActionId: UUID, $iconId: UUID) {
      createService(input: {service: {id: $id, name: $name, description: $description, type: $type, data: $data, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, campaignActionId: $campaignActionId, iconId: $iconId}}) {
        service {
          id
          name
          description
          type
          data
          createdBy
          updatedBy
          createdAt
          updatedAt
          campaignActionId
          iconId
        }
      }
    }\`;",
  "createShopifyAccount": "export const createShopifyAccount = gql\`
    mutation createShopifyAccountMutation($id: UUID, $name: String, $shopLink: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $partnerId: UUID!, $iconId: UUID) {
      createShopifyAccount(input: {shopifyAccount: {id: $id, name: $name, shopLink: $shopLink, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, partnerId: $partnerId, iconId: $iconId}}) {
        shopifyAccount {
          id
          name
          shopLink
          createdBy
          updatedBy
          createdAt
          updatedAt
          partnerId
          iconId
        }
      }
    }\`;",
  "createShopifyOrder": "export const createShopifyOrder = gql\`
    mutation createShopifyOrderMutation($id: UUID, $orderId: Int, $email: String, $orderStatus: String, $financialStatus: String, $subtotalPrice: BigFloat, $orderCreatedAt: Datetime, $orderClosedAt: Datetime, $bitcoinUpdatedAt: Datetime, $bitcoinRebate: BigFloat, $bitcoinAddress: String, $paidDate: Datetime, $transactionId: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $partnerId: UUID!, $shopifyAccountId: UUID!) {
      createShopifyOrder(input: {shopifyOrder: {id: $id, orderId: $orderId, email: $email, orderStatus: $orderStatus, financialStatus: $financialStatus, subtotalPrice: $subtotalPrice, orderCreatedAt: $orderCreatedAt, orderClosedAt: $orderClosedAt, bitcoinUpdatedAt: $bitcoinUpdatedAt, bitcoinRebate: $bitcoinRebate, bitcoinAddress: $bitcoinAddress, paidDate: $paidDate, transactionId: $transactionId, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, partnerId: $partnerId, shopifyAccountId: $shopifyAccountId}}) {
        shopifyOrder {
          id
          orderId
          email
          orderStatus
          financialStatus
          subtotalPrice
          orderCreatedAt
          orderClosedAt
          bitcoinUpdatedAt
          bitcoinRebate
          bitcoinAddress
          paidDate
          transactionId
          createdBy
          updatedBy
          createdAt
          updatedAt
          partnerId
          shopifyAccountId
        }
      }
    }\`;",
  "createShopifySecret": "export const createShopifySecret = gql\`
    mutation createShopifySecretMutation($id: UUID, $shopifyAccountId: UUID!, $name: String!, $value: String, $enc: String) {
      createShopifySecret(input: {shopifySecret: {id: $id, shopifyAccountId: $shopifyAccountId, name: $name, value: $value, enc: $enc}}) {
        shopifySecret {
          id
          shopifyAccountId
          name
          value
          enc
        }
      }
    }\`;",
  "createUser": "export const createUser = gql\`
    mutation createUserMutation($id: UUID, $username: String, $bitcoinAddress: String) {
      createUser(input: {user: {id: $id, username: $username, bitcoinAddress: $bitcoinAddress}}) {
        user {
          id
          username
          bitcoinAddress
        }
      }
    }\`;",
  "createUserEncryptedSecret": "export const createUserEncryptedSecret = gql\`
    mutation createUserEncryptedSecretMutation($id: UUID, $userId: UUID!, $name: String!, $value: String, $enc: String) {
      createUserEncryptedSecret(input: {userEncryptedSecret: {id: $id, userId: $userId, name: $name, value: $value, enc: $enc}}) {
        userEncryptedSecret {
          id
          userId
          name
          value
          enc
        }
      }
    }\`;",
  "createUserSecret": "export const createUserSecret = gql\`
    mutation createUserSecretMutation($id: UUID, $userId: UUID!, $name: String!, $value: String) {
      createUserSecret(input: {userSecret: {id: $id, userId: $userId, name: $name, value: $value}}) {
        userSecret {
          id
          userId
          name
          value
        }
      }
    }\`;",
  "deleteApiToken": "export const deleteApiToken = gql\`
    mutation deleteApiTokenMutation($id: UUID!) {
      deleteApiToken(input: {id: $id}) {
        apiToken {
          id
        }
      }
    }\`;",
  "deleteApiTokenByAccessToken": "export const deleteApiTokenByAccessToken = gql\`
    mutation deleteApiTokenByAccessTokenMutation($accessToken: String!) {
      deleteApiTokenByAccessToken(input: {accessToken: $accessToken}) {
        apiToken {
          accessToken
        }
      }
    }\`;",
  "deleteArticle": "export const deleteArticle = gql\`
    mutation deleteArticleMutation($id: UUID!) {
      deleteArticle(input: {id: $id}) {
        article {
          id
        }
      }
    }\`;",
  "deleteCampaign": "export const deleteCampaign = gql\`
    mutation deleteCampaignMutation($id: UUID!) {
      deleteCampaign(input: {id: $id}) {
        campaign {
          id
        }
      }
    }\`;",
  "deleteCampaignAction": "export const deleteCampaignAction = gql\`
    mutation deleteCampaignActionMutation($id: UUID!) {
      deleteCampaignAction(input: {id: $id}) {
        campaignAction {
          id
        }
      }
    }\`;",
  "deleteCampaignActionByName": "export const deleteCampaignActionByName = gql\`
    mutation deleteCampaignActionByNameMutation($name: String!) {
      deleteCampaignActionByName(input: {name: $name}) {
        campaignAction {
          name
        }
      }
    }\`;",
  "deleteCompletedAction": "export const deleteCompletedAction = gql\`
    mutation deleteCompletedActionMutation($id: UUID!) {
      deleteCompletedAction(input: {id: $id}) {
        completedAction {
          id
        }
      }
    }\`;",
  "deleteImage": "export const deleteImage = gql\`
    mutation deleteImageMutation($id: UUID!) {
      deleteImage(input: {id: $id}) {
        image {
          id
        }
      }
    }\`;",
  "deleteInitiativesPyraRecord": "export const deleteInitiativesPyraRecord = gql\`
    mutation deleteInitiativesPyraRecordMutation($id: UUID!) {
      deleteInitiativesPyraRecord(input: {id: $id}) {
        initiativesPyraRecord {
          id
        }
      }
    }\`;",
  "deleteMerchant": "export const deleteMerchant = gql\`
    mutation deleteMerchantMutation($id: UUID!) {
      deleteMerchant(input: {id: $id}) {
        merchant {
          id
        }
      }
    }\`;",
  "deletePartner": "export const deletePartner = gql\`
    mutation deletePartnerMutation($id: UUID!) {
      deletePartner(input: {id: $id}) {
        partner {
          id
        }
      }
    }\`;",
  "deletePermission": "export const deletePermission = gql\`
    mutation deletePermissionMutation($id: UUID!) {
      deletePermission(input: {id: $id}) {
        permission {
          id
        }
      }
    }\`;",
  "deleteProduct": "export const deleteProduct = gql\`
    mutation deleteProductMutation($id: UUID!) {
      deleteProduct(input: {id: $id}) {
        product {
          id
        }
      }
    }\`;",
  "deleteService": "export const deleteService = gql\`
    mutation deleteServiceMutation($id: UUID!) {
      deleteService(input: {id: $id}) {
        service {
          id
        }
      }
    }\`;",
  "deleteShopifyAccount": "export const deleteShopifyAccount = gql\`
    mutation deleteShopifyAccountMutation($id: UUID!) {
      deleteShopifyAccount(input: {id: $id}) {
        shopifyAccount {
          id
        }
      }
    }\`;",
  "deleteShopifyOrder": "export const deleteShopifyOrder = gql\`
    mutation deleteShopifyOrderMutation($id: UUID!) {
      deleteShopifyOrder(input: {id: $id}) {
        shopifyOrder {
          id
        }
      }
    }\`;",
  "deleteShopifyOrderByOrderIdAndEmailAndShopifyAccountId": "export const deleteShopifyOrderByOrderIdAndEmailAndShopifyAccountId = gql\`
    mutation deleteShopifyOrderByOrderIdAndEmailAndShopifyAccountIdMutation($orderId: Int!, $email: String!, $shopifyAccountId: UUID!) {
      deleteShopifyOrderByOrderIdAndEmailAndShopifyAccountId(input: {orderId: $orderId, email: $email, shopifyAccountId: $shopifyAccountId}) {
        shopifyOrder {
          orderId
          email
          shopifyAccountId
        }
      }
    }\`;",
  "deleteShopifySecret": "export const deleteShopifySecret = gql\`
    mutation deleteShopifySecretMutation($id: UUID!) {
      deleteShopifySecret(input: {id: $id}) {
        shopifySecret {
          id
        }
      }
    }\`;",
  "deleteShopifySecretByShopifyAccountIdAndName": "export const deleteShopifySecretByShopifyAccountIdAndName = gql\`
    mutation deleteShopifySecretByShopifyAccountIdAndNameMutation($shopifyAccountId: UUID!, $name: String!) {
      deleteShopifySecretByShopifyAccountIdAndName(input: {shopifyAccountId: $shopifyAccountId, name: $name}) {
        shopifySecret {
          shopifyAccountId
          name
        }
      }
    }\`;",
  "deleteUser": "export const deleteUser = gql\`
    mutation deleteUserMutation($id: UUID!) {
      deleteUser(input: {id: $id}) {
        user {
          id
        }
      }
    }\`;",
  "deleteUserByBitcoinAddress": "export const deleteUserByBitcoinAddress = gql\`
    mutation deleteUserByBitcoinAddressMutation($bitcoinAddress: String!) {
      deleteUserByBitcoinAddress(input: {bitcoinAddress: $bitcoinAddress}) {
        user {
          bitcoinAddress
        }
      }
    }\`;",
  "deleteUserByUsername": "export const deleteUserByUsername = gql\`
    mutation deleteUserByUsernameMutation($username: String!) {
      deleteUserByUsername(input: {username: $username}) {
        user {
          username
        }
      }
    }\`;",
  "deleteUserEncryptedSecret": "export const deleteUserEncryptedSecret = gql\`
    mutation deleteUserEncryptedSecretMutation($id: UUID!) {
      deleteUserEncryptedSecret(input: {id: $id}) {
        userEncryptedSecret {
          id
        }
      }
    }\`;",
  "deleteUserEncryptedSecretByUserIdAndName": "export const deleteUserEncryptedSecretByUserIdAndName = gql\`
    mutation deleteUserEncryptedSecretByUserIdAndNameMutation($userId: UUID!, $name: String!) {
      deleteUserEncryptedSecretByUserIdAndName(input: {userId: $userId, name: $name}) {
        userEncryptedSecret {
          userId
          name
        }
      }
    }\`;",
  "deleteUserSecret": "export const deleteUserSecret = gql\`
    mutation deleteUserSecretMutation($id: UUID!) {
      deleteUserSecret(input: {id: $id}) {
        userSecret {
          id
        }
      }
    }\`;",
  "deleteUserSecretByUserIdAndName": "export const deleteUserSecretByUserIdAndName = gql\`
    mutation deleteUserSecretByUserIdAndNameMutation($userId: UUID!, $name: String!) {
      deleteUserSecretByUserIdAndName(input: {userId: $userId, name: $name}) {
        userSecret {
          userId
          name
        }
      }
    }\`;",
  "getCurrentUser": "export const getCurrentUser = gql\`
    query getCurrentUserQuery {
      getCurrentUser {
        id
        username
        bitcoinAddress
        permissions
        completedActions
      }
    }\`;",
  "image": "export const image = gql\`
    query imageQuery($id: UUID!) {
      image(id: $id) {
        id
        name
        url
        versions
        createdBy
        updatedBy
        createdAt
        updatedAt
        partnersByLogoId
        partnersByBackgroundImageId
        campaignsByLogoId
        campaignsByBackgroundImageId
        campaignActionsByThumbnailId
        servicesByIconId
        merchantsByLogoId
        merchantsByBackgroundImageId
        productsByIconId
        shopifyAccountsByIconId
      }
    }\`;",
  "images": "export const images = gql\`
    query imagesQuery {
      images {totalCount, nodes: {
        id
        name
        url
        versions
        createdBy
        updatedBy
        createdAt
        updatedAt
        partnersByLogoId
        partnersByBackgroundImageId
        campaignsByLogoId
        campaignsByBackgroundImageId
        campaignActionsByThumbnailId
        servicesByIconId
        merchantsByLogoId
        merchantsByBackgroundImageId
        productsByIconId
        shopifyAccountsByIconId
      }}
    }\`;",
  "initiativesPyraRecord": "export const initiativesPyraRecord = gql\`
    query initiativesPyraRecordQuery($id: UUID!) {
      initiativesPyraRecord(id: $id) {
        id
        name
        email
        bitcoinAddress
        date
        actionsCompleted
        createdBy
        updatedBy
        createdAt
        updatedAt
        actionId
        action
      }
    }\`;",
  "initiativesPyraRecords": "export const initiativesPyraRecords = gql\`
    query initiativesPyraRecordsQuery {
      initiativesPyraRecords {totalCount, nodes: {
        id
        name
        email
        bitcoinAddress
        date
        actionsCompleted
        createdBy
        updatedBy
        createdAt
        updatedAt
        actionId
        action
      }}
    }\`;",
  "merchant": "export const merchant = gql\`
    query merchantQuery($id: UUID!) {
      merchant(id: $id) {
        id
        name
        bitcoinAddress
        description
        ownerId
        createdBy
        updatedBy
        createdAt
        updatedAt
        logoId
        backgroundImageId
        logo
        backgroundImage
        products
      }
    }\`;",
  "merchants": "export const merchants = gql\`
    query merchantsQuery {
      merchants {totalCount, nodes: {
        id
        name
        bitcoinAddress
        description
        ownerId
        createdBy
        updatedBy
        createdAt
        updatedAt
        logoId
        backgroundImageId
        logo
        backgroundImage
        products
      }}
    }\`;",
  "partner": "export const partner = gql\`
    query partnerQuery($id: UUID!) {
      partner(id: $id) {
        id
        name
        description
        bitcoinAddress
        ownerId
        createdBy
        updatedBy
        createdAt
        updatedAt
        logoId
        backgroundImageId
        logo
        backgroundImage
        campaigns
        campaignActions
        shopifyAccounts
        shopifyOrders
      }
    }\`;",
  "partners": "export const partners = gql\`
    query partnersQuery {
      partners {totalCount, nodes: {
        id
        name
        description
        bitcoinAddress
        ownerId
        createdBy
        updatedBy
        createdAt
        updatedAt
        logoId
        backgroundImageId
        logo
        backgroundImage
        campaigns
        campaignActions
        shopifyAccounts
        shopifyOrders
      }}
    }\`;",
  "permission": "export const permission = gql\`
    query permissionQuery($id: UUID!) {
      permission(id: $id) {
        id
        name
        createdBy
        updatedBy
        createdAt
        updatedAt
        userId
        user
      }
    }\`;",
  "permissions": "export const permissions = gql\`
    query permissionsQuery {
      permissions {totalCount, nodes: {
        id
        name
        createdBy
        updatedBy
        createdAt
        updatedAt
        userId
        user
      }}
    }\`;",
  "product": "export const product = gql\`
    query productQuery($id: UUID!) {
      product(id: $id) {
        id
        name
        url
        createdBy
        updatedBy
        createdAt
        updatedAt
        merchantId
        iconId
        merchant
        icon
      }
    }\`;",
  "products": "export const products = gql\`
    query productsQuery {
      products {totalCount, nodes: {
        id
        name
        url
        createdBy
        updatedBy
        createdAt
        updatedAt
        merchantId
        iconId
        merchant
        icon
      }}
    }\`;",
  "service": "export const service = gql\`
    query serviceQuery($id: UUID!) {
      service(id: $id) {
        id
        name
        description
        type
        data
        createdBy
        updatedBy
        createdAt
        updatedAt
        campaignActionId
        iconId
        campaignAction
        icon
      }
    }\`;",
  "services": "export const services = gql\`
    query servicesQuery {
      services {totalCount, nodes: {
        id
        name
        description
        type
        data
        createdBy
        updatedBy
        createdAt
        updatedAt
        campaignActionId
        iconId
        campaignAction
        icon
      }}
    }\`;",
  "shopifyAccount": "export const shopifyAccount = gql\`
    query shopifyAccountQuery($id: UUID!) {
      shopifyAccount(id: $id) {
        id
        name
        shopLink
        createdBy
        updatedBy
        createdAt
        updatedAt
        partnerId
        iconId
        partner
        icon
        shopifyOrders
      }
    }\`;",
  "shopifyAccounts": "export const shopifyAccounts = gql\`
    query shopifyAccountsQuery {
      shopifyAccounts {totalCount, nodes: {
        id
        name
        shopLink
        createdBy
        updatedBy
        createdAt
        updatedAt
        partnerId
        iconId
        partner
        icon
        shopifyOrders
      }}
    }\`;",
  "shopifyOrder": "export const shopifyOrder = gql\`
    query shopifyOrderQuery($id: UUID!) {
      shopifyOrder(id: $id) {
        id
        orderId
        email
        orderStatus
        financialStatus
        subtotalPrice
        orderCreatedAt
        orderClosedAt
        bitcoinUpdatedAt
        bitcoinRebate
        bitcoinAddress
        paidDate
        transactionId
        createdBy
        updatedBy
        createdAt
        updatedAt
        partnerId
        shopifyAccountId
        partner
        shopifyAccount
      }
    }\`;",
  "shopifyOrderByOrderIdAndEmailAndShopifyAccountId": "export const shopifyOrderByOrderIdAndEmailAndShopifyAccountId = gql\`
    query shopifyOrderByOrderIdAndEmailAndShopifyAccountIdQuery($orderId: Int!, $email: String!, $shopifyAccountId: UUID!) {
      shopifyOrderByOrderIdAndEmailAndShopifyAccountId(orderId: $orderId, email: $email, shopifyAccountId: $shopifyAccountId) {
        id
        orderId
        email
        orderStatus
        financialStatus
        subtotalPrice
        orderCreatedAt
        orderClosedAt
        bitcoinUpdatedAt
        bitcoinRebate
        bitcoinAddress
        paidDate
        transactionId
        createdBy
        updatedBy
        createdAt
        updatedAt
        partnerId
        shopifyAccountId
        partner
        shopifyAccount
      }
    }\`;",
  "shopifyOrders": "export const shopifyOrders = gql\`
    query shopifyOrdersQuery {
      shopifyOrders {totalCount, nodes: {
        id
        orderId
        email
        orderStatus
        financialStatus
        subtotalPrice
        orderCreatedAt
        orderClosedAt
        bitcoinUpdatedAt
        bitcoinRebate
        bitcoinAddress
        paidDate
        transactionId
        createdBy
        updatedBy
        createdAt
        updatedAt
        partnerId
        shopifyAccountId
        partner
        shopifyAccount
      }}
    }\`;",
  "shopifySecret": "export const shopifySecret = gql\`
    query shopifySecretQuery($id: UUID!) {
      shopifySecret(id: $id) {
        id
        shopifyAccountId
        name
        value
        enc
      }
    }\`;",
  "shopifySecretByShopifyAccountIdAndName": "export const shopifySecretByShopifyAccountIdAndName = gql\`
    query shopifySecretByShopifyAccountIdAndNameQuery($shopifyAccountId: UUID!, $name: String!) {
      shopifySecretByShopifyAccountIdAndName(shopifyAccountId: $shopifyAccountId, name: $name) {
        id
        shopifyAccountId
        name
        value
        enc
      }
    }\`;",
  "shopifySecrets": "export const shopifySecrets = gql\`
    query shopifySecretsQuery {
      shopifySecrets {totalCount, nodes: {
        id
        shopifyAccountId
        name
        value
        enc
      }}
    }\`;",
  "shopifySecretsUpsert": "export const shopifySecretsUpsert = gql\`
    mutation shopifySecretsUpsertMutation($vShopifyAccountId: UUID!, $secretName: String!, $secretValue: String!, $fieldEncoding: String!) {
      shopifySecretsUpsert(input: {vShopifyAccountId: $vShopifyAccountId, secretName: $secretName, secretValue: $secretValue, fieldEncoding: $fieldEncoding}) {
        boolean
      }
    }\`;",
  "signInRecordFailure": "export const signInRecordFailure = gql\`
    mutation signInRecordFailureMutation($bitcoinAddress: String!) {
      signInRecordFailure(input: {bitcoinAddress: $bitcoinAddress}) {
        clientMutationId
      }
    }\`;",
  "signInRequestChallenge": "export const signInRequestChallenge = gql\`
    mutation signInRequestChallengeMutation($bitcoinAddress: String!) {
      signInRequestChallenge(input: {bitcoinAddress: $bitcoinAddress}) {
        string
      }
    }\`;",
  "signInWithChallenge": "export const signInWithChallenge = gql\`
    mutation signInWithChallengeMutation($bitcoinAddress: String!, $specialValue: String!) {
      signInWithChallenge(input: {bitcoinAddress: $bitcoinAddress, specialValue: $specialValue}) {
        clientMutationId
      }
    }\`;",
  "signUpWithBitcoinAddress": "export const signUpWithBitcoinAddress = gql\`
    mutation signUpWithBitcoinAddressMutation($bitcoinAddress: String!) {
      signUpWithBitcoinAddress(input: {bitcoinAddress: $bitcoinAddress}) {
        clientMutationId
      }
    }\`;",
  "updateApiToken": "export const updateApiToken = gql\`
    mutation updateApiTokenMutation($id: UUID!, $userId: UUID, $accessToken: String, $accessTokenExpiresAt: Datetime) {
      updateApiToken(input: {id: $id, patch: {userId: $userId, accessToken: $accessToken, accessTokenExpiresAt: $accessTokenExpiresAt}}) {
        apiToken {
          id
          userId
          accessToken
          accessTokenExpiresAt
        }
      }
    }\`;",
  "updateApiTokenByAccessToken": "export const updateApiTokenByAccessToken = gql\`
    mutation updateApiTokenByAccessTokenMutation($id: UUID, $userId: UUID, $accessToken: String!, $accessTokenExpiresAt: Datetime) {
      updateApiTokenByAccessToken(input: {accessToken: $accessToken, patch: {id: $id, userId: $userId, accessTokenExpiresAt: $accessTokenExpiresAt}}) {
        apiToken {
          id
          userId
          accessToken
          accessTokenExpiresAt
        }
      }
    }\`;",
  "updateArticle": "export const updateArticle = gql\`
    mutation updateArticleMutation($id: UUID!, $header: String, $url: String, $image: String, $datePublished: Datetime, $ownerId: UUID, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime) {
      updateArticle(input: {id: $id, patch: {header: $header, url: $url, image: $image, datePublished: $datePublished, ownerId: $ownerId, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt}}) {
        article {
          id
          header
          url
          image
          datePublished
          ownerId
          createdBy
          updatedBy
          createdAt
          updatedAt
        }
      }
    }\`;",
  "updateCampaign": "export const updateCampaign = gql\`
    mutation updateCampaignMutation($id: UUID!, $name: String, $description: String, $startDate: Datetime, $endDate: Datetime, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $partnerId: UUID, $logoId: UUID, $backgroundImageId: UUID) {
      updateCampaign(input: {id: $id, patch: {name: $name, description: $description, startDate: $startDate, endDate: $endDate, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, partnerId: $partnerId, logoId: $logoId, backgroundImageId: $backgroundImageId}}) {
        campaign {
          id
          name
          description
          startDate
          endDate
          createdBy
          updatedBy
          createdAt
          updatedAt
          partnerId
          logoId
          backgroundImageId
        }
      }
    }\`;",
  "updateCampaignAction": "export const updateCampaignAction = gql\`
    mutation updateCampaignActionMutation($id: UUID!, $name: String, $description: String, $rewardUnit: String, $rewardAmount: BigFloat, $totalBitcoinLimit: BigFloat, $actionWeeklyLimit: Int, $actionDailyLimit: Int, $userTotalLimit: Int, $userWeeklyLimit: Int, $userDailyLimit: Int, $startDate: Datetime, $endDate: Datetime, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $campaignId: UUID, $partnerId: UUID, $thumbnailId: UUID) {
      updateCampaignAction(input: {id: $id, patch: {name: $name, description: $description, rewardUnit: $rewardUnit, rewardAmount: $rewardAmount, totalBitcoinLimit: $totalBitcoinLimit, actionWeeklyLimit: $actionWeeklyLimit, actionDailyLimit: $actionDailyLimit, userTotalLimit: $userTotalLimit, userWeeklyLimit: $userWeeklyLimit, userDailyLimit: $userDailyLimit, startDate: $startDate, endDate: $endDate, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, campaignId: $campaignId, partnerId: $partnerId, thumbnailId: $thumbnailId}}) {
        campaignAction {
          id
          name
          description
          rewardUnit
          rewardAmount
          totalBitcoinLimit
          actionWeeklyLimit
          actionDailyLimit
          userTotalLimit
          userWeeklyLimit
          userDailyLimit
          startDate
          endDate
          createdBy
          updatedBy
          createdAt
          updatedAt
          campaignId
          partnerId
          thumbnailId
        }
      }
    }\`;",
  "updateCampaignActionByName": "export const updateCampaignActionByName = gql\`
    mutation updateCampaignActionByNameMutation($id: UUID, $name: String!, $description: String, $rewardUnit: String, $rewardAmount: BigFloat, $totalBitcoinLimit: BigFloat, $actionWeeklyLimit: Int, $actionDailyLimit: Int, $userTotalLimit: Int, $userWeeklyLimit: Int, $userDailyLimit: Int, $startDate: Datetime, $endDate: Datetime, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $campaignId: UUID, $partnerId: UUID, $thumbnailId: UUID) {
      updateCampaignActionByName(input: {name: $name, patch: {id: $id, description: $description, rewardUnit: $rewardUnit, rewardAmount: $rewardAmount, totalBitcoinLimit: $totalBitcoinLimit, actionWeeklyLimit: $actionWeeklyLimit, actionDailyLimit: $actionDailyLimit, userTotalLimit: $userTotalLimit, userWeeklyLimit: $userWeeklyLimit, userDailyLimit: $userDailyLimit, startDate: $startDate, endDate: $endDate, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, campaignId: $campaignId, partnerId: $partnerId, thumbnailId: $thumbnailId}}) {
        campaignAction {
          id
          name
          description
          rewardUnit
          rewardAmount
          totalBitcoinLimit
          actionWeeklyLimit
          actionDailyLimit
          userTotalLimit
          userWeeklyLimit
          userDailyLimit
          startDate
          endDate
          createdBy
          updatedBy
          createdAt
          updatedAt
          campaignId
          partnerId
          thumbnailId
        }
      }
    }\`;",
  "updateCompletedAction": "export const updateCompletedAction = gql\`
    mutation updateCompletedActionMutation($id: UUID!, $dateCompleted: Datetime, $txid: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $userId: UUID, $actionId: UUID) {
      updateCompletedAction(input: {id: $id, patch: {dateCompleted: $dateCompleted, txid: $txid, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, userId: $userId, actionId: $actionId}}) {
        completedAction {
          id
          dateCompleted
          txid
          createdBy
          updatedBy
          createdAt
          updatedAt
          userId
          actionId
        }
      }
    }\`;",
  "updateImage": "export const updateImage = gql\`
    mutation updateImageMutation($id: UUID!, $name: String, $url: String, $versions: JSON, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime) {
      updateImage(input: {id: $id, patch: {name: $name, url: $url, versions: $versions, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt}}) {
        image {
          id
          name
          url
          versions
          createdBy
          updatedBy
          createdAt
          updatedAt
        }
      }
    }\`;",
  "updateInitiativesPyraRecord": "export const updateInitiativesPyraRecord = gql\`
    mutation updateInitiativesPyraRecordMutation($id: UUID!, $name: String, $email: String, $bitcoinAddress: String, $date: Datetime, $actionsCompleted: Int, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $actionId: UUID) {
      updateInitiativesPyraRecord(input: {id: $id, patch: {name: $name, email: $email, bitcoinAddress: $bitcoinAddress, date: $date, actionsCompleted: $actionsCompleted, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, actionId: $actionId}}) {
        initiativesPyraRecord {
          id
          name
          email
          bitcoinAddress
          date
          actionsCompleted
          createdBy
          updatedBy
          createdAt
          updatedAt
          actionId
        }
      }
    }\`;",
  "updateMerchant": "export const updateMerchant = gql\`
    mutation updateMerchantMutation($id: UUID!, $name: String, $bitcoinAddress: String, $description: String, $ownerId: UUID, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $logoId: UUID, $backgroundImageId: UUID) {
      updateMerchant(input: {id: $id, patch: {name: $name, bitcoinAddress: $bitcoinAddress, description: $description, ownerId: $ownerId, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, logoId: $logoId, backgroundImageId: $backgroundImageId}}) {
        merchant {
          id
          name
          bitcoinAddress
          description
          ownerId
          createdBy
          updatedBy
          createdAt
          updatedAt
          logoId
          backgroundImageId
        }
      }
    }\`;",
  "updatePartner": "export const updatePartner = gql\`
    mutation updatePartnerMutation($id: UUID!, $name: String, $description: String, $bitcoinAddress: String, $ownerId: UUID, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $logoId: UUID, $backgroundImageId: UUID) {
      updatePartner(input: {id: $id, patch: {name: $name, description: $description, bitcoinAddress: $bitcoinAddress, ownerId: $ownerId, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, logoId: $logoId, backgroundImageId: $backgroundImageId}}) {
        partner {
          id
          name
          description
          bitcoinAddress
          ownerId
          createdBy
          updatedBy
          createdAt
          updatedAt
          logoId
          backgroundImageId
        }
      }
    }\`;",
  "updatePermission": "export const updatePermission = gql\`
    mutation updatePermissionMutation($id: UUID!, $name: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $userId: UUID) {
      updatePermission(input: {id: $id, patch: {name: $name, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, userId: $userId}}) {
        permission {
          id
          name
          createdBy
          updatedBy
          createdAt
          updatedAt
          userId
        }
      }
    }\`;",
  "updateProduct": "export const updateProduct = gql\`
    mutation updateProductMutation($id: UUID!, $name: String, $url: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $merchantId: UUID, $iconId: UUID) {
      updateProduct(input: {id: $id, patch: {name: $name, url: $url, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, merchantId: $merchantId, iconId: $iconId}}) {
        product {
          id
          name
          url
          createdBy
          updatedBy
          createdAt
          updatedAt
          merchantId
          iconId
        }
      }
    }\`;",
  "updateService": "export const updateService = gql\`
    mutation updateServiceMutation($id: UUID!, $name: String, $description: String, $type: String, $data: JSON, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $campaignActionId: UUID, $iconId: UUID) {
      updateService(input: {id: $id, patch: {name: $name, description: $description, type: $type, data: $data, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, campaignActionId: $campaignActionId, iconId: $iconId}}) {
        service {
          id
          name
          description
          type
          data
          createdBy
          updatedBy
          createdAt
          updatedAt
          campaignActionId
          iconId
        }
      }
    }\`;",
  "updateShopifyAccount": "export const updateShopifyAccount = gql\`
    mutation updateShopifyAccountMutation($id: UUID!, $name: String, $shopLink: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $partnerId: UUID, $iconId: UUID) {
      updateShopifyAccount(input: {id: $id, patch: {name: $name, shopLink: $shopLink, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, partnerId: $partnerId, iconId: $iconId}}) {
        shopifyAccount {
          id
          name
          shopLink
          createdBy
          updatedBy
          createdAt
          updatedAt
          partnerId
          iconId
        }
      }
    }\`;",
  "updateShopifyOrder": "export const updateShopifyOrder = gql\`
    mutation updateShopifyOrderMutation($id: UUID!, $orderId: Int, $email: String, $orderStatus: String, $financialStatus: String, $subtotalPrice: BigFloat, $orderCreatedAt: Datetime, $orderClosedAt: Datetime, $bitcoinUpdatedAt: Datetime, $bitcoinRebate: BigFloat, $bitcoinAddress: String, $paidDate: Datetime, $transactionId: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $partnerId: UUID, $shopifyAccountId: UUID) {
      updateShopifyOrder(input: {id: $id, patch: {orderId: $orderId, email: $email, orderStatus: $orderStatus, financialStatus: $financialStatus, subtotalPrice: $subtotalPrice, orderCreatedAt: $orderCreatedAt, orderClosedAt: $orderClosedAt, bitcoinUpdatedAt: $bitcoinUpdatedAt, bitcoinRebate: $bitcoinRebate, bitcoinAddress: $bitcoinAddress, paidDate: $paidDate, transactionId: $transactionId, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, partnerId: $partnerId, shopifyAccountId: $shopifyAccountId}}) {
        shopifyOrder {
          id
          orderId
          email
          orderStatus
          financialStatus
          subtotalPrice
          orderCreatedAt
          orderClosedAt
          bitcoinUpdatedAt
          bitcoinRebate
          bitcoinAddress
          paidDate
          transactionId
          createdBy
          updatedBy
          createdAt
          updatedAt
          partnerId
          shopifyAccountId
        }
      }
    }\`;",
  "updateShopifyOrderByOrderIdAndEmailAndShopifyAccountId": "export const updateShopifyOrderByOrderIdAndEmailAndShopifyAccountId = gql\`
    mutation updateShopifyOrderByOrderIdAndEmailAndShopifyAccountIdMutation($id: UUID, $orderId: Int!, $email: String!, $orderStatus: String, $financialStatus: String, $subtotalPrice: BigFloat, $orderCreatedAt: Datetime, $orderClosedAt: Datetime, $bitcoinUpdatedAt: Datetime, $bitcoinRebate: BigFloat, $bitcoinAddress: String, $paidDate: Datetime, $transactionId: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $partnerId: UUID, $shopifyAccountId: UUID!) {
      updateShopifyOrderByOrderIdAndEmailAndShopifyAccountId(input: {orderId: $orderId, email: $email, shopifyAccountId: $shopifyAccountId, patch: {id: $id, orderStatus: $orderStatus, financialStatus: $financialStatus, subtotalPrice: $subtotalPrice, orderCreatedAt: $orderCreatedAt, orderClosedAt: $orderClosedAt, bitcoinUpdatedAt: $bitcoinUpdatedAt, bitcoinRebate: $bitcoinRebate, bitcoinAddress: $bitcoinAddress, paidDate: $paidDate, transactionId: $transactionId, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, partnerId: $partnerId}}) {
        shopifyOrder {
          id
          orderId
          email
          orderStatus
          financialStatus
          subtotalPrice
          orderCreatedAt
          orderClosedAt
          bitcoinUpdatedAt
          bitcoinRebate
          bitcoinAddress
          paidDate
          transactionId
          createdBy
          updatedBy
          createdAt
          updatedAt
          partnerId
          shopifyAccountId
        }
      }
    }\`;",
  "updateShopifySecret": "export const updateShopifySecret = gql\`
    mutation updateShopifySecretMutation($id: UUID!, $shopifyAccountId: UUID, $name: String, $value: String, $enc: String) {
      updateShopifySecret(input: {id: $id, patch: {shopifyAccountId: $shopifyAccountId, name: $name, value: $value, enc: $enc}}) {
        shopifySecret {
          id
          shopifyAccountId
          name
          value
          enc
        }
      }
    }\`;",
  "updateShopifySecretByShopifyAccountIdAndName": "export const updateShopifySecretByShopifyAccountIdAndName = gql\`
    mutation updateShopifySecretByShopifyAccountIdAndNameMutation($id: UUID, $shopifyAccountId: UUID!, $name: String!, $value: String, $enc: String) {
      updateShopifySecretByShopifyAccountIdAndName(input: {shopifyAccountId: $shopifyAccountId, name: $name, patch: {id: $id, value: $value, enc: $enc}}) {
        shopifySecret {
          id
          shopifyAccountId
          name
          value
          enc
        }
      }
    }\`;",
  "updateUser": "export const updateUser = gql\`
    mutation updateUserMutation($id: UUID!, $username: String, $bitcoinAddress: String) {
      updateUser(input: {id: $id, patch: {username: $username, bitcoinAddress: $bitcoinAddress}}) {
        user {
          id
          username
          bitcoinAddress
        }
      }
    }\`;",
  "updateUserByBitcoinAddress": "export const updateUserByBitcoinAddress = gql\`
    mutation updateUserByBitcoinAddressMutation($id: UUID, $username: String, $bitcoinAddress: String!) {
      updateUserByBitcoinAddress(input: {bitcoinAddress: $bitcoinAddress, patch: {id: $id, username: $username}}) {
        user {
          id
          username
          bitcoinAddress
        }
      }
    }\`;",
  "updateUserByUsername": "export const updateUserByUsername = gql\`
    mutation updateUserByUsernameMutation($id: UUID, $username: String!, $bitcoinAddress: String) {
      updateUserByUsername(input: {username: $username, patch: {id: $id, bitcoinAddress: $bitcoinAddress}}) {
        user {
          id
          username
          bitcoinAddress
        }
      }
    }\`;",
  "updateUserEncryptedSecret": "export const updateUserEncryptedSecret = gql\`
    mutation updateUserEncryptedSecretMutation($id: UUID!, $userId: UUID, $name: String, $value: String, $enc: String) {
      updateUserEncryptedSecret(input: {id: $id, patch: {userId: $userId, name: $name, value: $value, enc: $enc}}) {
        userEncryptedSecret {
          id
          userId
          name
          value
          enc
        }
      }
    }\`;",
  "updateUserEncryptedSecretByUserIdAndName": "export const updateUserEncryptedSecretByUserIdAndName = gql\`
    mutation updateUserEncryptedSecretByUserIdAndNameMutation($id: UUID, $userId: UUID!, $name: String!, $value: String, $enc: String) {
      updateUserEncryptedSecretByUserIdAndName(input: {userId: $userId, name: $name, patch: {id: $id, value: $value, enc: $enc}}) {
        userEncryptedSecret {
          id
          userId
          name
          value
          enc
        }
      }
    }\`;",
  "updateUserSecret": "export const updateUserSecret = gql\`
    mutation updateUserSecretMutation($id: UUID!, $userId: UUID, $name: String, $value: String) {
      updateUserSecret(input: {id: $id, patch: {userId: $userId, name: $name, value: $value}}) {
        userSecret {
          id
          userId
          name
          value
        }
      }
    }\`;",
  "updateUserSecretByUserIdAndName": "export const updateUserSecretByUserIdAndName = gql\`
    mutation updateUserSecretByUserIdAndNameMutation($id: UUID, $userId: UUID!, $name: String!, $value: String) {
      updateUserSecretByUserIdAndName(input: {userId: $userId, name: $name, patch: {id: $id, value: $value}}) {
        userSecret {
          id
          userId
          name
          value
        }
      }
    }\`;",
  "user": "export const user = gql\`
    query userQuery($id: UUID!) {
      user(id: $id) {
        id
        username
        bitcoinAddress
        permissions
        completedActions
      }
    }\`;",
  "userByBitcoinAddress": "export const userByBitcoinAddress = gql\`
    query userByBitcoinAddressQuery($bitcoinAddress: String!) {
      userByBitcoinAddress(bitcoinAddress: $bitcoinAddress) {
        id
        username
        bitcoinAddress
        permissions
        completedActions
      }
    }\`;",
  "userByUsername": "export const userByUsername = gql\`
    query userByUsernameQuery($username: String!) {
      userByUsername(username: $username) {
        id
        username
        bitcoinAddress
        permissions
        completedActions
      }
    }\`;",
  "userEncryptedSecret": "export const userEncryptedSecret = gql\`
    query userEncryptedSecretQuery($id: UUID!) {
      userEncryptedSecret(id: $id) {
        id
        userId
        name
        value
        enc
      }
    }\`;",
  "userEncryptedSecretByUserIdAndName": "export const userEncryptedSecretByUserIdAndName = gql\`
    query userEncryptedSecretByUserIdAndNameQuery($userId: UUID!, $name: String!) {
      userEncryptedSecretByUserIdAndName(userId: $userId, name: $name) {
        id
        userId
        name
        value
        enc
      }
    }\`;",
  "userEncryptedSecrets": "export const userEncryptedSecrets = gql\`
    query userEncryptedSecretsQuery {
      userEncryptedSecrets {totalCount, nodes: {
        id
        userId
        name
        value
        enc
      }}
    }\`;",
  "userEncryptedSecretsUpsert": "export const userEncryptedSecretsUpsert = gql\`
    mutation userEncryptedSecretsUpsertMutation($vUserId: UUID!, $secretName: String!, $secretValue: String!, $fieldEncoding: String!) {
      userEncryptedSecretsUpsert(input: {vUserId: $vUserId, secretName: $secretName, secretValue: $secretValue, fieldEncoding: $fieldEncoding}) {
        boolean
      }
    }\`;",
  "userSecret": "export const userSecret = gql\`
    query userSecretQuery($id: UUID!) {
      userSecret(id: $id) {
        id
        userId
        name
        value
      }
    }\`;",
  "userSecretByUserIdAndName": "export const userSecretByUserIdAndName = gql\`
    query userSecretByUserIdAndNameQuery($userId: UUID!, $name: String!) {
      userSecretByUserIdAndName(userId: $userId, name: $name) {
        id
        userId
        name
        value
      }
    }\`;",
  "userSecrets": "export const userSecrets = gql\`
    query userSecretsQuery {
      userSecrets {totalCount, nodes: {
        id
        userId
        name
        value
      }}
    }\`;",
  "users": "export const users = gql\`
    query usersQuery {
      users {totalCount, nodes: {
        id
        username
        bitcoinAddress
        permissions
        completedActions
      }}
    }\`;",
  "uuidGenerateSeededUuid": "export const uuidGenerateSeededUuid = gql\`
    mutation uuidGenerateSeededUuidMutation($seed: String!) {
      uuidGenerateSeededUuid(input: {seed: $seed}) {
        uuid
      }
    }\`;",
  "uuidGenerateV4": "export const uuidGenerateV4 = gql\`
    mutation uuidGenerateV4Mutation {
      uuidGenerateV4 {
        uuid
      }
    }\`;",
}
`;
