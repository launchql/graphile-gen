// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`works 1`] = `
Object {
  "createApiTokenMutation": "export const createApiTokenMutation = gql\`
    mutation createApiTokenMutation($id: UUID, $userId: UUID!, $accessToken: String, $accessTokenExpiresAt: Datetime) {
      createApiToken(input: {apiToken: {id: $id, userId: $userId, accessToken: $accessToken, accessTokenExpiresAt: $accessTokenExpiresAt}}) {
        apiToken {
          id
          userId
          accessToken
          accessTokenExpiresAt
        }
      }
    }\`;",
  "createArticleMutation": "export const createArticleMutation = gql\`
    mutation createArticleMutation($id: UUID, $header: String, $url: String, $image: String, $datePublished: Datetime, $ownerId: UUID!, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime) {
      createArticle(input: {article: {id: $id, header: $header, url: $url, image: $image, datePublished: $datePublished, ownerId: $ownerId, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt}}) {
        article {
          id
          header
          url
          image
          datePublished
          ownerId
          createdBy
          updatedBy
          createdAt
          updatedAt
        }
      }
    }\`;",
  "createCampaignActionMutation": "export const createCampaignActionMutation = gql\`
    mutation createCampaignActionMutation($id: UUID, $name: String!, $description: String, $rewardUnit: String, $rewardAmount: BigFloat, $totalBitcoinLimit: BigFloat, $actionWeeklyLimit: Int, $actionDailyLimit: Int, $userTotalLimit: Int, $userWeeklyLimit: Int, $userDailyLimit: Int, $startDate: Datetime, $endDate: Datetime, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $campaignId: UUID!, $partnerId: UUID!, $thumbnailId: UUID) {
      createCampaignAction(input: {campaignAction: {id: $id, name: $name, description: $description, rewardUnit: $rewardUnit, rewardAmount: $rewardAmount, totalBitcoinLimit: $totalBitcoinLimit, actionWeeklyLimit: $actionWeeklyLimit, actionDailyLimit: $actionDailyLimit, userTotalLimit: $userTotalLimit, userWeeklyLimit: $userWeeklyLimit, userDailyLimit: $userDailyLimit, startDate: $startDate, endDate: $endDate, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, campaignId: $campaignId, partnerId: $partnerId, thumbnailId: $thumbnailId}}) {
        campaignAction {
          id
          name
          description
          rewardUnit
          rewardAmount
          totalBitcoinLimit
          actionWeeklyLimit
          actionDailyLimit
          userTotalLimit
          userWeeklyLimit
          userDailyLimit
          startDate
          endDate
          createdBy
          updatedBy
          createdAt
          updatedAt
          campaignId
          partnerId
          thumbnailId
        }
      }
    }\`;",
  "createCampaignMutation": "export const createCampaignMutation = gql\`
    mutation createCampaignMutation($id: UUID, $name: String, $description: String, $startDate: Datetime, $endDate: Datetime, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $partnerId: UUID!, $logoId: UUID, $backgroundImageId: UUID) {
      createCampaign(input: {campaign: {id: $id, name: $name, description: $description, startDate: $startDate, endDate: $endDate, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, partnerId: $partnerId, logoId: $logoId, backgroundImageId: $backgroundImageId}}) {
        campaign {
          id
          name
          description
          startDate
          endDate
          createdBy
          updatedBy
          createdAt
          updatedAt
          partnerId
          logoId
          backgroundImageId
        }
      }
    }\`;",
  "createCompletedActionMutation": "export const createCompletedActionMutation = gql\`
    mutation createCompletedActionMutation($id: UUID, $dateCompleted: Datetime, $txid: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $userId: UUID!, $actionId: UUID!) {
      createCompletedAction(input: {completedAction: {id: $id, dateCompleted: $dateCompleted, txid: $txid, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, userId: $userId, actionId: $actionId}}) {
        completedAction {
          id
          dateCompleted
          txid
          createdBy
          updatedBy
          createdAt
          updatedAt
          userId
          actionId
        }
      }
    }\`;",
  "createImageMutation": "export const createImageMutation = gql\`
    mutation createImageMutation($id: UUID, $name: String, $url: String, $versions: JSON, $versions2: JSON, $versions3: JSON!, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime) {
      createImage(input: {image: {id: $id, name: $name, url: $url, versions: $versions, versions2: $versions2, versions3: $versions3, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt}}) {
        image {
          id
          name
          url
          versions
          versions2
          versions3
          createdBy
          updatedBy
          createdAt
          updatedAt
        }
      }
    }\`;",
  "createInitiativesPyraRecordMutation": "export const createInitiativesPyraRecordMutation = gql\`
    mutation createInitiativesPyraRecordMutation($id: UUID, $name: String, $email: String, $bitcoinAddress: String, $date: Datetime, $actionsCompleted: Int, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $actionId: UUID!) {
      createInitiativesPyraRecord(input: {initiativesPyraRecord: {id: $id, name: $name, email: $email, bitcoinAddress: $bitcoinAddress, date: $date, actionsCompleted: $actionsCompleted, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, actionId: $actionId}}) {
        initiativesPyraRecord {
          id
          name
          email
          bitcoinAddress
          date
          actionsCompleted
          createdBy
          updatedBy
          createdAt
          updatedAt
          actionId
        }
      }
    }\`;",
  "createMerchantMutation": "export const createMerchantMutation = gql\`
    mutation createMerchantMutation($id: UUID, $name: String, $bitcoinAddress: String, $description: String, $ownerId: UUID!, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $logoId: UUID, $backgroundImageId: UUID) {
      createMerchant(input: {merchant: {id: $id, name: $name, bitcoinAddress: $bitcoinAddress, description: $description, ownerId: $ownerId, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, logoId: $logoId, backgroundImageId: $backgroundImageId}}) {
        merchant {
          id
          name
          bitcoinAddress
          description
          ownerId
          createdBy
          updatedBy
          createdAt
          updatedAt
          logoId
          backgroundImageId
        }
      }
    }\`;",
  "createPartnerMutation": "export const createPartnerMutation = gql\`
    mutation createPartnerMutation($id: UUID, $name: String, $description: String, $bitcoinAddress: String, $ownerId: UUID!, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $logoId: UUID, $backgroundImageId: UUID) {
      createPartner(input: {partner: {id: $id, name: $name, description: $description, bitcoinAddress: $bitcoinAddress, ownerId: $ownerId, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, logoId: $logoId, backgroundImageId: $backgroundImageId}}) {
        partner {
          id
          name
          description
          bitcoinAddress
          ownerId
          createdBy
          updatedBy
          createdAt
          updatedAt
          logoId
          backgroundImageId
        }
      }
    }\`;",
  "createPermissionMutation": "export const createPermissionMutation = gql\`
    mutation createPermissionMutation($id: UUID, $name: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $userId: UUID!) {
      createPermission(input: {permission: {id: $id, name: $name, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, userId: $userId}}) {
        permission {
          id
          name
          createdBy
          updatedBy
          createdAt
          updatedAt
          userId
        }
      }
    }\`;",
  "createProductMutation": "export const createProductMutation = gql\`
    mutation createProductMutation($id: UUID, $name: String, $url: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $merchantId: UUID!, $iconId: UUID) {
      createProduct(input: {product: {id: $id, name: $name, url: $url, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, merchantId: $merchantId, iconId: $iconId}}) {
        product {
          id
          name
          url
          createdBy
          updatedBy
          createdAt
          updatedAt
          merchantId
          iconId
        }
      }
    }\`;",
  "createServiceMutation": "export const createServiceMutation = gql\`
    mutation createServiceMutation($id: UUID, $name: String, $description: String, $type: String, $data: JSON, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $campaignActionId: UUID, $iconId: UUID) {
      createService(input: {service: {id: $id, name: $name, description: $description, type: $type, data: $data, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, campaignActionId: $campaignActionId, iconId: $iconId}}) {
        service {
          id
          name
          description
          type
          data
          createdBy
          updatedBy
          createdAt
          updatedAt
          campaignActionId
          iconId
        }
      }
    }\`;",
  "createShopifyAccountMutation": "export const createShopifyAccountMutation = gql\`
    mutation createShopifyAccountMutation($id: UUID, $name: String, $shopLink: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $partnerId: UUID!, $iconId: UUID) {
      createShopifyAccount(input: {shopifyAccount: {id: $id, name: $name, shopLink: $shopLink, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, partnerId: $partnerId, iconId: $iconId}}) {
        shopifyAccount {
          id
          name
          shopLink
          createdBy
          updatedBy
          createdAt
          updatedAt
          partnerId
          iconId
        }
      }
    }\`;",
  "createShopifyOrderMutation": "export const createShopifyOrderMutation = gql\`
    mutation createShopifyOrderMutation($id: UUID, $orderId: Int, $email: String, $orderStatus: String, $financialStatus: String, $subtotalPrice: BigFloat, $orderCreatedAt: Datetime, $orderClosedAt: Datetime, $bitcoinUpdatedAt: Datetime, $bitcoinRebate: BigFloat, $bitcoinAddress: String, $paidDate: Datetime, $transactionId: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $partnerId: UUID!, $shopifyAccountId: UUID!) {
      createShopifyOrder(input: {shopifyOrder: {id: $id, orderId: $orderId, email: $email, orderStatus: $orderStatus, financialStatus: $financialStatus, subtotalPrice: $subtotalPrice, orderCreatedAt: $orderCreatedAt, orderClosedAt: $orderClosedAt, bitcoinUpdatedAt: $bitcoinUpdatedAt, bitcoinRebate: $bitcoinRebate, bitcoinAddress: $bitcoinAddress, paidDate: $paidDate, transactionId: $transactionId, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, partnerId: $partnerId, shopifyAccountId: $shopifyAccountId}}) {
        shopifyOrder {
          id
          orderId
          email
          orderStatus
          financialStatus
          subtotalPrice
          orderCreatedAt
          orderClosedAt
          bitcoinUpdatedAt
          bitcoinRebate
          bitcoinAddress
          paidDate
          transactionId
          createdBy
          updatedBy
          createdAt
          updatedAt
          partnerId
          shopifyAccountId
        }
      }
    }\`;",
  "createShopifySecretMutation": "export const createShopifySecretMutation = gql\`
    mutation createShopifySecretMutation($id: UUID, $shopifyAccountId: UUID!, $name: String!, $value: String, $enc: String) {
      createShopifySecret(input: {shopifySecret: {id: $id, shopifyAccountId: $shopifyAccountId, name: $name, value: $value, enc: $enc}}) {
        shopifySecret {
          id
          shopifyAccountId
          name
          value
          enc
        }
      }
    }\`;",
  "createUserEncryptedSecretMutation": "export const createUserEncryptedSecretMutation = gql\`
    mutation createUserEncryptedSecretMutation($id: UUID, $userId: UUID!, $name: String!, $value: String, $enc: String) {
      createUserEncryptedSecret(input: {userEncryptedSecret: {id: $id, userId: $userId, name: $name, value: $value, enc: $enc}}) {
        userEncryptedSecret {
          id
          userId
          name
          value
          enc
        }
      }
    }\`;",
  "createUserMutation": "export const createUserMutation = gql\`
    mutation createUserMutation($id: UUID, $username: String, $bitcoinAddress: String) {
      createUser(input: {user: {id: $id, username: $username, bitcoinAddress: $bitcoinAddress}}) {
        user {
          id
          username
          bitcoinAddress
        }
      }
    }\`;",
  "createUserSecretMutation": "export const createUserSecretMutation = gql\`
    mutation createUserSecretMutation($id: UUID, $userId: UUID!, $name: String!, $value: String) {
      createUserSecret(input: {userSecret: {id: $id, userId: $userId, name: $name, value: $value}}) {
        userSecret {
          id
          userId
          name
          value
        }
      }
    }\`;",
  "deleteApiTokenByAccessTokenMutation": "export const deleteApiTokenByAccessTokenMutation = gql\`
    mutation deleteApiTokenByAccessTokenMutation($accessToken: String!) {
      deleteApiTokenByAccessToken(input: {accessToken: $accessToken}) {
        apiToken {
          accessToken
        }
      }
    }\`;",
  "deleteApiTokenMutation": "export const deleteApiTokenMutation = gql\`
    mutation deleteApiTokenMutation($id: UUID!) {
      deleteApiToken(input: {id: $id}) {
        apiToken {
          id
        }
      }
    }\`;",
  "deleteArticleMutation": "export const deleteArticleMutation = gql\`
    mutation deleteArticleMutation($id: UUID!) {
      deleteArticle(input: {id: $id}) {
        article {
          id
        }
      }
    }\`;",
  "deleteCampaignActionByNameMutation": "export const deleteCampaignActionByNameMutation = gql\`
    mutation deleteCampaignActionByNameMutation($name: String!) {
      deleteCampaignActionByName(input: {name: $name}) {
        campaignAction {
          name
        }
      }
    }\`;",
  "deleteCampaignActionMutation": "export const deleteCampaignActionMutation = gql\`
    mutation deleteCampaignActionMutation($id: UUID!) {
      deleteCampaignAction(input: {id: $id}) {
        campaignAction {
          id
        }
      }
    }\`;",
  "deleteCampaignMutation": "export const deleteCampaignMutation = gql\`
    mutation deleteCampaignMutation($id: UUID!) {
      deleteCampaign(input: {id: $id}) {
        campaign {
          id
        }
      }
    }\`;",
  "deleteCompletedActionMutation": "export const deleteCompletedActionMutation = gql\`
    mutation deleteCompletedActionMutation($id: UUID!) {
      deleteCompletedAction(input: {id: $id}) {
        completedAction {
          id
        }
      }
    }\`;",
  "deleteImageMutation": "export const deleteImageMutation = gql\`
    mutation deleteImageMutation($id: UUID!) {
      deleteImage(input: {id: $id}) {
        image {
          id
        }
      }
    }\`;",
  "deleteInitiativesPyraRecordMutation": "export const deleteInitiativesPyraRecordMutation = gql\`
    mutation deleteInitiativesPyraRecordMutation($id: UUID!) {
      deleteInitiativesPyraRecord(input: {id: $id}) {
        initiativesPyraRecord {
          id
        }
      }
    }\`;",
  "deleteMerchantMutation": "export const deleteMerchantMutation = gql\`
    mutation deleteMerchantMutation($id: UUID!) {
      deleteMerchant(input: {id: $id}) {
        merchant {
          id
        }
      }
    }\`;",
  "deletePartnerMutation": "export const deletePartnerMutation = gql\`
    mutation deletePartnerMutation($id: UUID!) {
      deletePartner(input: {id: $id}) {
        partner {
          id
        }
      }
    }\`;",
  "deletePermissionMutation": "export const deletePermissionMutation = gql\`
    mutation deletePermissionMutation($id: UUID!) {
      deletePermission(input: {id: $id}) {
        permission {
          id
        }
      }
    }\`;",
  "deleteProductMutation": "export const deleteProductMutation = gql\`
    mutation deleteProductMutation($id: UUID!) {
      deleteProduct(input: {id: $id}) {
        product {
          id
        }
      }
    }\`;",
  "deleteServiceMutation": "export const deleteServiceMutation = gql\`
    mutation deleteServiceMutation($id: UUID!) {
      deleteService(input: {id: $id}) {
        service {
          id
        }
      }
    }\`;",
  "deleteShopifyAccountMutation": "export const deleteShopifyAccountMutation = gql\`
    mutation deleteShopifyAccountMutation($id: UUID!) {
      deleteShopifyAccount(input: {id: $id}) {
        shopifyAccount {
          id
        }
      }
    }\`;",
  "deleteShopifyOrderByOrderIdAndEmailAndShopifyAccountIdMutation": "export const deleteShopifyOrderByOrderIdAndEmailAndShopifyAccountIdMutation = gql\`
    mutation deleteShopifyOrderByOrderIdAndEmailAndShopifyAccountIdMutation($orderId: Int!, $email: String!, $shopifyAccountId: UUID!) {
      deleteShopifyOrderByOrderIdAndEmailAndShopifyAccountId(input: {orderId: $orderId, email: $email, shopifyAccountId: $shopifyAccountId}) {
        shopifyOrder {
          orderId
          email
          shopifyAccountId
        }
      }
    }\`;",
  "deleteShopifyOrderMutation": "export const deleteShopifyOrderMutation = gql\`
    mutation deleteShopifyOrderMutation($id: UUID!) {
      deleteShopifyOrder(input: {id: $id}) {
        shopifyOrder {
          id
        }
      }
    }\`;",
  "deleteShopifySecretByShopifyAccountIdAndNameMutation": "export const deleteShopifySecretByShopifyAccountIdAndNameMutation = gql\`
    mutation deleteShopifySecretByShopifyAccountIdAndNameMutation($shopifyAccountId: UUID!, $name: String!) {
      deleteShopifySecretByShopifyAccountIdAndName(input: {shopifyAccountId: $shopifyAccountId, name: $name}) {
        shopifySecret {
          shopifyAccountId
          name
        }
      }
    }\`;",
  "deleteShopifySecretMutation": "export const deleteShopifySecretMutation = gql\`
    mutation deleteShopifySecretMutation($id: UUID!) {
      deleteShopifySecret(input: {id: $id}) {
        shopifySecret {
          id
        }
      }
    }\`;",
  "deleteUserByBitcoinAddressMutation": "export const deleteUserByBitcoinAddressMutation = gql\`
    mutation deleteUserByBitcoinAddressMutation($bitcoinAddress: String!) {
      deleteUserByBitcoinAddress(input: {bitcoinAddress: $bitcoinAddress}) {
        user {
          bitcoinAddress
        }
      }
    }\`;",
  "deleteUserByUsernameMutation": "export const deleteUserByUsernameMutation = gql\`
    mutation deleteUserByUsernameMutation($username: String!) {
      deleteUserByUsername(input: {username: $username}) {
        user {
          username
        }
      }
    }\`;",
  "deleteUserEncryptedSecretByUserIdAndNameMutation": "export const deleteUserEncryptedSecretByUserIdAndNameMutation = gql\`
    mutation deleteUserEncryptedSecretByUserIdAndNameMutation($userId: UUID!, $name: String!) {
      deleteUserEncryptedSecretByUserIdAndName(input: {userId: $userId, name: $name}) {
        userEncryptedSecret {
          userId
          name
        }
      }
    }\`;",
  "deleteUserEncryptedSecretMutation": "export const deleteUserEncryptedSecretMutation = gql\`
    mutation deleteUserEncryptedSecretMutation($id: UUID!) {
      deleteUserEncryptedSecret(input: {id: $id}) {
        userEncryptedSecret {
          id
        }
      }
    }\`;",
  "deleteUserMutation": "export const deleteUserMutation = gql\`
    mutation deleteUserMutation($id: UUID!) {
      deleteUser(input: {id: $id}) {
        user {
          id
        }
      }
    }\`;",
  "deleteUserSecretByUserIdAndNameMutation": "export const deleteUserSecretByUserIdAndNameMutation = gql\`
    mutation deleteUserSecretByUserIdAndNameMutation($userId: UUID!, $name: String!) {
      deleteUserSecretByUserIdAndName(input: {userId: $userId, name: $name}) {
        userSecret {
          userId
          name
        }
      }
    }\`;",
  "deleteUserSecretMutation": "export const deleteUserSecretMutation = gql\`
    mutation deleteUserSecretMutation($id: UUID!) {
      deleteUserSecret(input: {id: $id}) {
        userSecret {
          id
        }
      }
    }\`;",
  "getApiTokenByAccessTokenQuery": "export const getApiTokenByAccessTokenQuery = gql\`
    query getApiTokenByAccessTokenQuery($accessToken: String!) {
      apiTokenByAccessToken(accessToken: $accessToken) {
        id
        userId
        accessToken
        accessTokenExpiresAt
      }
    }\`;",
  "getApiTokenQuery": "export const getApiTokenQuery = gql\`
    query getApiTokenQuery($id: UUID!) {
      apiToken(id: $id) {
        id
        userId
        accessToken
        accessTokenExpiresAt
      }
    }\`;",
  "getApiTokensQuery": "export const getApiTokensQuery = gql\`
    query getApiTokensQuery {
      apiTokens {totalCount, nodes {
        id
        userId
        accessToken
        accessTokenExpiresAt
      }}
    }\`;",
  "getArticleQuery": "export const getArticleQuery = gql\`
    query getArticleQuery($id: UUID!) {
      article(id: $id) {
        id
        header
        url
        image
        datePublished
        ownerId
        createdBy
        updatedBy
        createdAt
        updatedAt
      }
    }\`;",
  "getArticlesQuery": "export const getArticlesQuery = gql\`
    query getArticlesQuery {
      articles {totalCount, nodes {
        id
        header
        url
        image
        datePublished
        ownerId
        createdBy
        updatedBy
        createdAt
        updatedAt
      }}
    }\`;",
  "getCampaignActionByNameQuery": "export const getCampaignActionByNameQuery = gql\`
    query getCampaignActionByNameQuery($name: String!) {
      campaignActionByName(name: $name) {
        id
        name
        description
        rewardUnit
        rewardAmount
        totalBitcoinLimit
        actionWeeklyLimit
        actionDailyLimit
        userTotalLimit
        userWeeklyLimit
        userDailyLimit
        startDate
        endDate
        createdBy
        updatedBy
        createdAt
        updatedAt
        campaignId
        partnerId
        thumbnailId
        campaign
        partner
        thumbnail
        completedActionsByActionId
        services
        initiativesPyraRecordsByActionId
      }
    }\`;",
  "getCampaignActionQuery": "export const getCampaignActionQuery = gql\`
    query getCampaignActionQuery($id: UUID!) {
      campaignAction(id: $id) {
        id
        name
        description
        rewardUnit
        rewardAmount
        totalBitcoinLimit
        actionWeeklyLimit
        actionDailyLimit
        userTotalLimit
        userWeeklyLimit
        userDailyLimit
        startDate
        endDate
        createdBy
        updatedBy
        createdAt
        updatedAt
        campaignId
        partnerId
        thumbnailId
        campaign
        partner
        thumbnail
        completedActionsByActionId
        services
        initiativesPyraRecordsByActionId
      }
    }\`;",
  "getCampaignActionsQuery": "export const getCampaignActionsQuery = gql\`
    query getCampaignActionsQuery {
      campaignActions {totalCount, nodes {
        id
        name
        description
        rewardUnit
        rewardAmount
        totalBitcoinLimit
        actionWeeklyLimit
        actionDailyLimit
        userTotalLimit
        userWeeklyLimit
        userDailyLimit
        startDate
        endDate
        createdBy
        updatedBy
        createdAt
        updatedAt
        campaignId
        partnerId
        thumbnailId
        campaign
        partner
        thumbnail
        completedActionsByActionId
        services
        initiativesPyraRecordsByActionId
      }}
    }\`;",
  "getCampaignQuery": "export const getCampaignQuery = gql\`
    query getCampaignQuery($id: UUID!) {
      campaign(id: $id) {
        id
        name
        description
        startDate
        endDate
        createdBy
        updatedBy
        createdAt
        updatedAt
        partnerId
        logoId
        backgroundImageId
        partner
        logo
        backgroundImage
        campaignActions
      }
    }\`;",
  "getCampaignsQuery": "export const getCampaignsQuery = gql\`
    query getCampaignsQuery {
      campaigns {totalCount, nodes {
        id
        name
        description
        startDate
        endDate
        createdBy
        updatedBy
        createdAt
        updatedAt
        partnerId
        logoId
        backgroundImageId
        partner
        logo
        backgroundImage
        campaignActions
      }}
    }\`;",
  "getCompletedActionQuery": "export const getCompletedActionQuery = gql\`
    query getCompletedActionQuery($id: UUID!) {
      completedAction(id: $id) {
        id
        dateCompleted
        txid
        createdBy
        updatedBy
        createdAt
        updatedAt
        userId
        actionId
        user
        action
      }
    }\`;",
  "getCompletedActionsQuery": "export const getCompletedActionsQuery = gql\`
    query getCompletedActionsQuery {
      completedActions {totalCount, nodes {
        id
        dateCompleted
        txid
        createdBy
        updatedBy
        createdAt
        updatedAt
        userId
        actionId
        user
        action
      }}
    }\`;",
  "getGetCurrentUserQuery": "export const getGetCurrentUserQuery = gql\`
    query getGetCurrentUserQuery {
      getCurrentUser {
        id
        username
        bitcoinAddress
        permissions
        completedActions
      }
    }\`;",
  "getImageQuery": "export const getImageQuery = gql\`
    query getImageQuery($id: UUID!) {
      image(id: $id) {
        id
        name
        url
        versions
        createdBy
        updatedBy
        createdAt
        updatedAt
        partnersByLogoId
        partnersByBackgroundImageId
        campaignsByLogoId
        campaignsByBackgroundImageId
        campaignActionsByThumbnailId
        servicesByIconId
        merchantsByLogoId
        merchantsByBackgroundImageId
        productsByIconId
        shopifyAccountsByIconId
      }
    }\`;",
  "getImagesQuery": "export const getImagesQuery = gql\`
    query getImagesQuery {
      images {totalCount, nodes {
        id
        name
        url
        versions
        createdBy
        updatedBy
        createdAt
        updatedAt
        partnersByLogoId
        partnersByBackgroundImageId
        campaignsByLogoId
        campaignsByBackgroundImageId
        campaignActionsByThumbnailId
        servicesByIconId
        merchantsByLogoId
        merchantsByBackgroundImageId
        productsByIconId
        shopifyAccountsByIconId
      }}
    }\`;",
  "getInitiativesPyraRecordQuery": "export const getInitiativesPyraRecordQuery = gql\`
    query getInitiativesPyraRecordQuery($id: UUID!) {
      initiativesPyraRecord(id: $id) {
        id
        name
        email
        bitcoinAddress
        date
        actionsCompleted
        createdBy
        updatedBy
        createdAt
        updatedAt
        actionId
        action
      }
    }\`;",
  "getInitiativesPyraRecordsQuery": "export const getInitiativesPyraRecordsQuery = gql\`
    query getInitiativesPyraRecordsQuery {
      initiativesPyraRecords {totalCount, nodes {
        id
        name
        email
        bitcoinAddress
        date
        actionsCompleted
        createdBy
        updatedBy
        createdAt
        updatedAt
        actionId
        action
      }}
    }\`;",
  "getMerchantQuery": "export const getMerchantQuery = gql\`
    query getMerchantQuery($id: UUID!) {
      merchant(id: $id) {
        id
        name
        bitcoinAddress
        description
        ownerId
        createdBy
        updatedBy
        createdAt
        updatedAt
        logoId
        backgroundImageId
        logo
        backgroundImage
        products
      }
    }\`;",
  "getMerchantsQuery": "export const getMerchantsQuery = gql\`
    query getMerchantsQuery {
      merchants {totalCount, nodes {
        id
        name
        bitcoinAddress
        description
        ownerId
        createdBy
        updatedBy
        createdAt
        updatedAt
        logoId
        backgroundImageId
        logo
        backgroundImage
        products
      }}
    }\`;",
  "getPartnerQuery": "export const getPartnerQuery = gql\`
    query getPartnerQuery($id: UUID!) {
      partner(id: $id) {
        id
        name
        description
        bitcoinAddress
        ownerId
        createdBy
        updatedBy
        createdAt
        updatedAt
        logoId
        backgroundImageId
        logo
        backgroundImage
        campaigns
        campaignActions
        shopifyAccounts
        shopifyOrders
      }
    }\`;",
  "getPartnersQuery": "export const getPartnersQuery = gql\`
    query getPartnersQuery {
      partners {totalCount, nodes {
        id
        name
        description
        bitcoinAddress
        ownerId
        createdBy
        updatedBy
        createdAt
        updatedAt
        logoId
        backgroundImageId
        logo
        backgroundImage
        campaigns
        campaignActions
        shopifyAccounts
        shopifyOrders
      }}
    }\`;",
  "getPermissionQuery": "export const getPermissionQuery = gql\`
    query getPermissionQuery($id: UUID!) {
      permission(id: $id) {
        id
        name
        createdBy
        updatedBy
        createdAt
        updatedAt
        userId
        user
      }
    }\`;",
  "getPermissionsQuery": "export const getPermissionsQuery = gql\`
    query getPermissionsQuery {
      permissions {totalCount, nodes {
        id
        name
        createdBy
        updatedBy
        createdAt
        updatedAt
        userId
        user
      }}
    }\`;",
  "getProductQuery": "export const getProductQuery = gql\`
    query getProductQuery($id: UUID!) {
      product(id: $id) {
        id
        name
        url
        createdBy
        updatedBy
        createdAt
        updatedAt
        merchantId
        iconId
        merchant
        icon
      }
    }\`;",
  "getProductsQuery": "export const getProductsQuery = gql\`
    query getProductsQuery {
      products {totalCount, nodes {
        id
        name
        url
        createdBy
        updatedBy
        createdAt
        updatedAt
        merchantId
        iconId
        merchant
        icon
      }}
    }\`;",
  "getServiceQuery": "export const getServiceQuery = gql\`
    query getServiceQuery($id: UUID!) {
      service(id: $id) {
        id
        name
        description
        type
        data
        createdBy
        updatedBy
        createdAt
        updatedAt
        campaignActionId
        iconId
        campaignAction
        icon
      }
    }\`;",
  "getServicesQuery": "export const getServicesQuery = gql\`
    query getServicesQuery {
      services {totalCount, nodes {
        id
        name
        description
        type
        data
        createdBy
        updatedBy
        createdAt
        updatedAt
        campaignActionId
        iconId
        campaignAction
        icon
      }}
    }\`;",
  "getShopifyAccountQuery": "export const getShopifyAccountQuery = gql\`
    query getShopifyAccountQuery($id: UUID!) {
      shopifyAccount(id: $id) {
        id
        name
        shopLink
        createdBy
        updatedBy
        createdAt
        updatedAt
        partnerId
        iconId
        partner
        icon
        shopifyOrders
      }
    }\`;",
  "getShopifyAccountsQuery": "export const getShopifyAccountsQuery = gql\`
    query getShopifyAccountsQuery {
      shopifyAccounts {totalCount, nodes {
        id
        name
        shopLink
        createdBy
        updatedBy
        createdAt
        updatedAt
        partnerId
        iconId
        partner
        icon
        shopifyOrders
      }}
    }\`;",
  "getShopifyOrderByOrderIdAndEmailAndShopifyAccountIdQuery": "export const getShopifyOrderByOrderIdAndEmailAndShopifyAccountIdQuery = gql\`
    query getShopifyOrderByOrderIdAndEmailAndShopifyAccountIdQuery($orderId: Int!, $email: String!, $shopifyAccountId: UUID!) {
      shopifyOrderByOrderIdAndEmailAndShopifyAccountId(orderId: $orderId, email: $email, shopifyAccountId: $shopifyAccountId) {
        id
        orderId
        email
        orderStatus
        financialStatus
        subtotalPrice
        orderCreatedAt
        orderClosedAt
        bitcoinUpdatedAt
        bitcoinRebate
        bitcoinAddress
        paidDate
        transactionId
        createdBy
        updatedBy
        createdAt
        updatedAt
        partnerId
        shopifyAccountId
        partner
        shopifyAccount
      }
    }\`;",
  "getShopifyOrderQuery": "export const getShopifyOrderQuery = gql\`
    query getShopifyOrderQuery($id: UUID!) {
      shopifyOrder(id: $id) {
        id
        orderId
        email
        orderStatus
        financialStatus
        subtotalPrice
        orderCreatedAt
        orderClosedAt
        bitcoinUpdatedAt
        bitcoinRebate
        bitcoinAddress
        paidDate
        transactionId
        createdBy
        updatedBy
        createdAt
        updatedAt
        partnerId
        shopifyAccountId
        partner
        shopifyAccount
      }
    }\`;",
  "getShopifyOrdersQuery": "export const getShopifyOrdersQuery = gql\`
    query getShopifyOrdersQuery {
      shopifyOrders {totalCount, nodes {
        id
        orderId
        email
        orderStatus
        financialStatus
        subtotalPrice
        orderCreatedAt
        orderClosedAt
        bitcoinUpdatedAt
        bitcoinRebate
        bitcoinAddress
        paidDate
        transactionId
        createdBy
        updatedBy
        createdAt
        updatedAt
        partnerId
        shopifyAccountId
        partner
        shopifyAccount
      }}
    }\`;",
  "getShopifySecretByShopifyAccountIdAndNameQuery": "export const getShopifySecretByShopifyAccountIdAndNameQuery = gql\`
    query getShopifySecretByShopifyAccountIdAndNameQuery($shopifyAccountId: UUID!, $name: String!) {
      shopifySecretByShopifyAccountIdAndName(shopifyAccountId: $shopifyAccountId, name: $name) {
        id
        shopifyAccountId
        name
        value
        enc
      }
    }\`;",
  "getShopifySecretQuery": "export const getShopifySecretQuery = gql\`
    query getShopifySecretQuery($id: UUID!) {
      shopifySecret(id: $id) {
        id
        shopifyAccountId
        name
        value
        enc
      }
    }\`;",
  "getShopifySecretsQuery": "export const getShopifySecretsQuery = gql\`
    query getShopifySecretsQuery {
      shopifySecrets {totalCount, nodes {
        id
        shopifyAccountId
        name
        value
        enc
      }}
    }\`;",
  "getUserByBitcoinAddressQuery": "export const getUserByBitcoinAddressQuery = gql\`
    query getUserByBitcoinAddressQuery($bitcoinAddress: String!) {
      userByBitcoinAddress(bitcoinAddress: $bitcoinAddress) {
        id
        username
        bitcoinAddress
        permissions
        completedActions
      }
    }\`;",
  "getUserByUsernameQuery": "export const getUserByUsernameQuery = gql\`
    query getUserByUsernameQuery($username: String!) {
      userByUsername(username: $username) {
        id
        username
        bitcoinAddress
        permissions
        completedActions
      }
    }\`;",
  "getUserEncryptedSecretByUserIdAndNameQuery": "export const getUserEncryptedSecretByUserIdAndNameQuery = gql\`
    query getUserEncryptedSecretByUserIdAndNameQuery($userId: UUID!, $name: String!) {
      userEncryptedSecretByUserIdAndName(userId: $userId, name: $name) {
        id
        userId
        name
        value
        enc
      }
    }\`;",
  "getUserEncryptedSecretQuery": "export const getUserEncryptedSecretQuery = gql\`
    query getUserEncryptedSecretQuery($id: UUID!) {
      userEncryptedSecret(id: $id) {
        id
        userId
        name
        value
        enc
      }
    }\`;",
  "getUserEncryptedSecretsQuery": "export const getUserEncryptedSecretsQuery = gql\`
    query getUserEncryptedSecretsQuery {
      userEncryptedSecrets {totalCount, nodes {
        id
        userId
        name
        value
        enc
      }}
    }\`;",
  "getUserQuery": "export const getUserQuery = gql\`
    query getUserQuery($id: UUID!) {
      user(id: $id) {
        id
        username
        bitcoinAddress
        permissions
        completedActions
      }
    }\`;",
  "getUserSecretByUserIdAndNameQuery": "export const getUserSecretByUserIdAndNameQuery = gql\`
    query getUserSecretByUserIdAndNameQuery($userId: UUID!, $name: String!) {
      userSecretByUserIdAndName(userId: $userId, name: $name) {
        id
        userId
        name
        value
      }
    }\`;",
  "getUserSecretQuery": "export const getUserSecretQuery = gql\`
    query getUserSecretQuery($id: UUID!) {
      userSecret(id: $id) {
        id
        userId
        name
        value
      }
    }\`;",
  "getUserSecretsQuery": "export const getUserSecretsQuery = gql\`
    query getUserSecretsQuery {
      userSecrets {totalCount, nodes {
        id
        userId
        name
        value
      }}
    }\`;",
  "getUsersQuery": "export const getUsersQuery = gql\`
    query getUsersQuery {
      users {totalCount, nodes {
        id
        username
        bitcoinAddress
        permissions
        completedActions
      }}
    }\`;",
  "shopifySecretsUpsertMutation": "export const shopifySecretsUpsertMutation = gql\`
    mutation shopifySecretsUpsertMutation($vShopifyAccountId: UUID!, $secretName: String!, $secretValue: String!, $fieldEncoding: String!) {
      shopifySecretsUpsert(input: {vShopifyAccountId: $vShopifyAccountId, secretName: $secretName, secretValue: $secretValue, fieldEncoding: $fieldEncoding}) {
        boolean
      }
    }\`;",
  "signInRecordFailureMutation": "export const signInRecordFailureMutation = gql\`
    mutation signInRecordFailureMutation($bitcoinAddress: String!) {
      signInRecordFailure(input: {bitcoinAddress: $bitcoinAddress}) {
        clientMutationId
      }
    }\`;",
  "signInRequestChallengeMutation": "export const signInRequestChallengeMutation = gql\`
    mutation signInRequestChallengeMutation($bitcoinAddress: String!) {
      signInRequestChallenge(input: {bitcoinAddress: $bitcoinAddress}) {
        string
      }
    }\`;",
  "signInWithChallengeMutation": "export const signInWithChallengeMutation = gql\`
    mutation signInWithChallengeMutation($bitcoinAddress: String!, $specialValue: String!) {
      signInWithChallenge(input: {bitcoinAddress: $bitcoinAddress, specialValue: $specialValue}) {
        clientMutationId
      }
    }\`;",
  "signUpWithBitcoinAddressMutation": "export const signUpWithBitcoinAddressMutation = gql\`
    mutation signUpWithBitcoinAddressMutation($bitcoinAddress: String!) {
      signUpWithBitcoinAddress(input: {bitcoinAddress: $bitcoinAddress}) {
        clientMutationId
      }
    }\`;",
  "updateApiTokenByAccessTokenMutation": "export const updateApiTokenByAccessTokenMutation = gql\`
    mutation updateApiTokenByAccessTokenMutation($id: UUID, $userId: UUID, $accessToken: String!, $accessTokenExpiresAt: Datetime) {
      updateApiTokenByAccessToken(input: {accessToken: $accessToken, patch: {id: $id, userId: $userId, accessTokenExpiresAt: $accessTokenExpiresAt}}) {
        apiToken {
          id
          userId
          accessToken
          accessTokenExpiresAt
        }
      }
    }\`;",
  "updateApiTokenMutation": "export const updateApiTokenMutation = gql\`
    mutation updateApiTokenMutation($id: UUID!, $userId: UUID, $accessToken: String, $accessTokenExpiresAt: Datetime) {
      updateApiToken(input: {id: $id, patch: {userId: $userId, accessToken: $accessToken, accessTokenExpiresAt: $accessTokenExpiresAt}}) {
        apiToken {
          id
          userId
          accessToken
          accessTokenExpiresAt
        }
      }
    }\`;",
  "updateArticleMutation": "export const updateArticleMutation = gql\`
    mutation updateArticleMutation($id: UUID!, $header: String, $url: String, $image: String, $datePublished: Datetime, $ownerId: UUID, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime) {
      updateArticle(input: {id: $id, patch: {header: $header, url: $url, image: $image, datePublished: $datePublished, ownerId: $ownerId, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt}}) {
        article {
          id
          header
          url
          image
          datePublished
          ownerId
          createdBy
          updatedBy
          createdAt
          updatedAt
        }
      }
    }\`;",
  "updateCampaignActionByNameMutation": "export const updateCampaignActionByNameMutation = gql\`
    mutation updateCampaignActionByNameMutation($id: UUID, $name: String!, $description: String, $rewardUnit: String, $rewardAmount: BigFloat, $totalBitcoinLimit: BigFloat, $actionWeeklyLimit: Int, $actionDailyLimit: Int, $userTotalLimit: Int, $userWeeklyLimit: Int, $userDailyLimit: Int, $startDate: Datetime, $endDate: Datetime, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $campaignId: UUID, $partnerId: UUID, $thumbnailId: UUID) {
      updateCampaignActionByName(input: {name: $name, patch: {id: $id, description: $description, rewardUnit: $rewardUnit, rewardAmount: $rewardAmount, totalBitcoinLimit: $totalBitcoinLimit, actionWeeklyLimit: $actionWeeklyLimit, actionDailyLimit: $actionDailyLimit, userTotalLimit: $userTotalLimit, userWeeklyLimit: $userWeeklyLimit, userDailyLimit: $userDailyLimit, startDate: $startDate, endDate: $endDate, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, campaignId: $campaignId, partnerId: $partnerId, thumbnailId: $thumbnailId}}) {
        campaignAction {
          id
          name
          description
          rewardUnit
          rewardAmount
          totalBitcoinLimit
          actionWeeklyLimit
          actionDailyLimit
          userTotalLimit
          userWeeklyLimit
          userDailyLimit
          startDate
          endDate
          createdBy
          updatedBy
          createdAt
          updatedAt
          campaignId
          partnerId
          thumbnailId
        }
      }
    }\`;",
  "updateCampaignActionMutation": "export const updateCampaignActionMutation = gql\`
    mutation updateCampaignActionMutation($id: UUID!, $name: String, $description: String, $rewardUnit: String, $rewardAmount: BigFloat, $totalBitcoinLimit: BigFloat, $actionWeeklyLimit: Int, $actionDailyLimit: Int, $userTotalLimit: Int, $userWeeklyLimit: Int, $userDailyLimit: Int, $startDate: Datetime, $endDate: Datetime, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $campaignId: UUID, $partnerId: UUID, $thumbnailId: UUID) {
      updateCampaignAction(input: {id: $id, patch: {name: $name, description: $description, rewardUnit: $rewardUnit, rewardAmount: $rewardAmount, totalBitcoinLimit: $totalBitcoinLimit, actionWeeklyLimit: $actionWeeklyLimit, actionDailyLimit: $actionDailyLimit, userTotalLimit: $userTotalLimit, userWeeklyLimit: $userWeeklyLimit, userDailyLimit: $userDailyLimit, startDate: $startDate, endDate: $endDate, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, campaignId: $campaignId, partnerId: $partnerId, thumbnailId: $thumbnailId}}) {
        campaignAction {
          id
          name
          description
          rewardUnit
          rewardAmount
          totalBitcoinLimit
          actionWeeklyLimit
          actionDailyLimit
          userTotalLimit
          userWeeklyLimit
          userDailyLimit
          startDate
          endDate
          createdBy
          updatedBy
          createdAt
          updatedAt
          campaignId
          partnerId
          thumbnailId
        }
      }
    }\`;",
  "updateCampaignMutation": "export const updateCampaignMutation = gql\`
    mutation updateCampaignMutation($id: UUID!, $name: String, $description: String, $startDate: Datetime, $endDate: Datetime, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $partnerId: UUID, $logoId: UUID, $backgroundImageId: UUID) {
      updateCampaign(input: {id: $id, patch: {name: $name, description: $description, startDate: $startDate, endDate: $endDate, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, partnerId: $partnerId, logoId: $logoId, backgroundImageId: $backgroundImageId}}) {
        campaign {
          id
          name
          description
          startDate
          endDate
          createdBy
          updatedBy
          createdAt
          updatedAt
          partnerId
          logoId
          backgroundImageId
        }
      }
    }\`;",
  "updateCompletedActionMutation": "export const updateCompletedActionMutation = gql\`
    mutation updateCompletedActionMutation($id: UUID!, $dateCompleted: Datetime, $txid: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $userId: UUID, $actionId: UUID) {
      updateCompletedAction(input: {id: $id, patch: {dateCompleted: $dateCompleted, txid: $txid, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, userId: $userId, actionId: $actionId}}) {
        completedAction {
          id
          dateCompleted
          txid
          createdBy
          updatedBy
          createdAt
          updatedAt
          userId
          actionId
        }
      }
    }\`;",
  "updateImageMutation": "export const updateImageMutation = gql\`
    mutation updateImageMutation($id: UUID!, $name: String, $url: String, $versions: JSON, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime) {
      updateImage(input: {id: $id, patch: {name: $name, url: $url, versions: $versions, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt}}) {
        image {
          id
          name
          url
          versions
          createdBy
          updatedBy
          createdAt
          updatedAt
        }
      }
    }\`;",
  "updateInitiativesPyraRecordMutation": "export const updateInitiativesPyraRecordMutation = gql\`
    mutation updateInitiativesPyraRecordMutation($id: UUID!, $name: String, $email: String, $bitcoinAddress: String, $date: Datetime, $actionsCompleted: Int, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $actionId: UUID) {
      updateInitiativesPyraRecord(input: {id: $id, patch: {name: $name, email: $email, bitcoinAddress: $bitcoinAddress, date: $date, actionsCompleted: $actionsCompleted, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, actionId: $actionId}}) {
        initiativesPyraRecord {
          id
          name
          email
          bitcoinAddress
          date
          actionsCompleted
          createdBy
          updatedBy
          createdAt
          updatedAt
          actionId
        }
      }
    }\`;",
  "updateMerchantMutation": "export const updateMerchantMutation = gql\`
    mutation updateMerchantMutation($id: UUID!, $name: String, $bitcoinAddress: String, $description: String, $ownerId: UUID, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $logoId: UUID, $backgroundImageId: UUID) {
      updateMerchant(input: {id: $id, patch: {name: $name, bitcoinAddress: $bitcoinAddress, description: $description, ownerId: $ownerId, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, logoId: $logoId, backgroundImageId: $backgroundImageId}}) {
        merchant {
          id
          name
          bitcoinAddress
          description
          ownerId
          createdBy
          updatedBy
          createdAt
          updatedAt
          logoId
          backgroundImageId
        }
      }
    }\`;",
  "updatePartnerMutation": "export const updatePartnerMutation = gql\`
    mutation updatePartnerMutation($id: UUID!, $name: String, $description: String, $bitcoinAddress: String, $ownerId: UUID, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $logoId: UUID, $backgroundImageId: UUID) {
      updatePartner(input: {id: $id, patch: {name: $name, description: $description, bitcoinAddress: $bitcoinAddress, ownerId: $ownerId, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, logoId: $logoId, backgroundImageId: $backgroundImageId}}) {
        partner {
          id
          name
          description
          bitcoinAddress
          ownerId
          createdBy
          updatedBy
          createdAt
          updatedAt
          logoId
          backgroundImageId
        }
      }
    }\`;",
  "updatePermissionMutation": "export const updatePermissionMutation = gql\`
    mutation updatePermissionMutation($id: UUID!, $name: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $userId: UUID) {
      updatePermission(input: {id: $id, patch: {name: $name, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, userId: $userId}}) {
        permission {
          id
          name
          createdBy
          updatedBy
          createdAt
          updatedAt
          userId
        }
      }
    }\`;",
  "updateProductMutation": "export const updateProductMutation = gql\`
    mutation updateProductMutation($id: UUID!, $name: String, $url: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $merchantId: UUID, $iconId: UUID) {
      updateProduct(input: {id: $id, patch: {name: $name, url: $url, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, merchantId: $merchantId, iconId: $iconId}}) {
        product {
          id
          name
          url
          createdBy
          updatedBy
          createdAt
          updatedAt
          merchantId
          iconId
        }
      }
    }\`;",
  "updateServiceMutation": "export const updateServiceMutation = gql\`
    mutation updateServiceMutation($id: UUID!, $name: String, $description: String, $type: String, $data: JSON, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $campaignActionId: UUID, $iconId: UUID) {
      updateService(input: {id: $id, patch: {name: $name, description: $description, type: $type, data: $data, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, campaignActionId: $campaignActionId, iconId: $iconId}}) {
        service {
          id
          name
          description
          type
          data
          createdBy
          updatedBy
          createdAt
          updatedAt
          campaignActionId
          iconId
        }
      }
    }\`;",
  "updateShopifyAccountMutation": "export const updateShopifyAccountMutation = gql\`
    mutation updateShopifyAccountMutation($id: UUID!, $name: String, $shopLink: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $partnerId: UUID, $iconId: UUID) {
      updateShopifyAccount(input: {id: $id, patch: {name: $name, shopLink: $shopLink, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, partnerId: $partnerId, iconId: $iconId}}) {
        shopifyAccount {
          id
          name
          shopLink
          createdBy
          updatedBy
          createdAt
          updatedAt
          partnerId
          iconId
        }
      }
    }\`;",
  "updateShopifyOrderByOrderIdAndEmailAndShopifyAccountIdMutation": "export const updateShopifyOrderByOrderIdAndEmailAndShopifyAccountIdMutation = gql\`
    mutation updateShopifyOrderByOrderIdAndEmailAndShopifyAccountIdMutation($id: UUID, $orderId: Int!, $email: String!, $orderStatus: String, $financialStatus: String, $subtotalPrice: BigFloat, $orderCreatedAt: Datetime, $orderClosedAt: Datetime, $bitcoinUpdatedAt: Datetime, $bitcoinRebate: BigFloat, $bitcoinAddress: String, $paidDate: Datetime, $transactionId: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $partnerId: UUID, $shopifyAccountId: UUID!) {
      updateShopifyOrderByOrderIdAndEmailAndShopifyAccountId(input: {orderId: $orderId, email: $email, shopifyAccountId: $shopifyAccountId, patch: {id: $id, orderStatus: $orderStatus, financialStatus: $financialStatus, subtotalPrice: $subtotalPrice, orderCreatedAt: $orderCreatedAt, orderClosedAt: $orderClosedAt, bitcoinUpdatedAt: $bitcoinUpdatedAt, bitcoinRebate: $bitcoinRebate, bitcoinAddress: $bitcoinAddress, paidDate: $paidDate, transactionId: $transactionId, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, partnerId: $partnerId}}) {
        shopifyOrder {
          id
          orderId
          email
          orderStatus
          financialStatus
          subtotalPrice
          orderCreatedAt
          orderClosedAt
          bitcoinUpdatedAt
          bitcoinRebate
          bitcoinAddress
          paidDate
          transactionId
          createdBy
          updatedBy
          createdAt
          updatedAt
          partnerId
          shopifyAccountId
        }
      }
    }\`;",
  "updateShopifyOrderMutation": "export const updateShopifyOrderMutation = gql\`
    mutation updateShopifyOrderMutation($id: UUID!, $orderId: Int, $email: String, $orderStatus: String, $financialStatus: String, $subtotalPrice: BigFloat, $orderCreatedAt: Datetime, $orderClosedAt: Datetime, $bitcoinUpdatedAt: Datetime, $bitcoinRebate: BigFloat, $bitcoinAddress: String, $paidDate: Datetime, $transactionId: String, $createdBy: UUID, $updatedBy: UUID, $createdAt: Datetime, $updatedAt: Datetime, $partnerId: UUID, $shopifyAccountId: UUID) {
      updateShopifyOrder(input: {id: $id, patch: {orderId: $orderId, email: $email, orderStatus: $orderStatus, financialStatus: $financialStatus, subtotalPrice: $subtotalPrice, orderCreatedAt: $orderCreatedAt, orderClosedAt: $orderClosedAt, bitcoinUpdatedAt: $bitcoinUpdatedAt, bitcoinRebate: $bitcoinRebate, bitcoinAddress: $bitcoinAddress, paidDate: $paidDate, transactionId: $transactionId, createdBy: $createdBy, updatedBy: $updatedBy, createdAt: $createdAt, updatedAt: $updatedAt, partnerId: $partnerId, shopifyAccountId: $shopifyAccountId}}) {
        shopifyOrder {
          id
          orderId
          email
          orderStatus
          financialStatus
          subtotalPrice
          orderCreatedAt
          orderClosedAt
          bitcoinUpdatedAt
          bitcoinRebate
          bitcoinAddress
          paidDate
          transactionId
          createdBy
          updatedBy
          createdAt
          updatedAt
          partnerId
          shopifyAccountId
        }
      }
    }\`;",
  "updateShopifySecretByShopifyAccountIdAndNameMutation": "export const updateShopifySecretByShopifyAccountIdAndNameMutation = gql\`
    mutation updateShopifySecretByShopifyAccountIdAndNameMutation($id: UUID, $shopifyAccountId: UUID!, $name: String!, $value: String, $enc: String) {
      updateShopifySecretByShopifyAccountIdAndName(input: {shopifyAccountId: $shopifyAccountId, name: $name, patch: {id: $id, value: $value, enc: $enc}}) {
        shopifySecret {
          id
          shopifyAccountId
          name
          value
          enc
        }
      }
    }\`;",
  "updateShopifySecretMutation": "export const updateShopifySecretMutation = gql\`
    mutation updateShopifySecretMutation($id: UUID!, $shopifyAccountId: UUID, $name: String, $value: String, $enc: String) {
      updateShopifySecret(input: {id: $id, patch: {shopifyAccountId: $shopifyAccountId, name: $name, value: $value, enc: $enc}}) {
        shopifySecret {
          id
          shopifyAccountId
          name
          value
          enc
        }
      }
    }\`;",
  "updateUserByBitcoinAddressMutation": "export const updateUserByBitcoinAddressMutation = gql\`
    mutation updateUserByBitcoinAddressMutation($id: UUID, $username: String, $bitcoinAddress: String!) {
      updateUserByBitcoinAddress(input: {bitcoinAddress: $bitcoinAddress, patch: {id: $id, username: $username}}) {
        user {
          id
          username
          bitcoinAddress
        }
      }
    }\`;",
  "updateUserByUsernameMutation": "export const updateUserByUsernameMutation = gql\`
    mutation updateUserByUsernameMutation($id: UUID, $username: String!, $bitcoinAddress: String) {
      updateUserByUsername(input: {username: $username, patch: {id: $id, bitcoinAddress: $bitcoinAddress}}) {
        user {
          id
          username
          bitcoinAddress
        }
      }
    }\`;",
  "updateUserEncryptedSecretByUserIdAndNameMutation": "export const updateUserEncryptedSecretByUserIdAndNameMutation = gql\`
    mutation updateUserEncryptedSecretByUserIdAndNameMutation($id: UUID, $userId: UUID!, $name: String!, $value: String, $enc: String) {
      updateUserEncryptedSecretByUserIdAndName(input: {userId: $userId, name: $name, patch: {id: $id, value: $value, enc: $enc}}) {
        userEncryptedSecret {
          id
          userId
          name
          value
          enc
        }
      }
    }\`;",
  "updateUserEncryptedSecretMutation": "export const updateUserEncryptedSecretMutation = gql\`
    mutation updateUserEncryptedSecretMutation($id: UUID!, $userId: UUID, $name: String, $value: String, $enc: String) {
      updateUserEncryptedSecret(input: {id: $id, patch: {userId: $userId, name: $name, value: $value, enc: $enc}}) {
        userEncryptedSecret {
          id
          userId
          name
          value
          enc
        }
      }
    }\`;",
  "updateUserMutation": "export const updateUserMutation = gql\`
    mutation updateUserMutation($id: UUID!, $username: String, $bitcoinAddress: String) {
      updateUser(input: {id: $id, patch: {username: $username, bitcoinAddress: $bitcoinAddress}}) {
        user {
          id
          username
          bitcoinAddress
        }
      }
    }\`;",
  "updateUserSecretByUserIdAndNameMutation": "export const updateUserSecretByUserIdAndNameMutation = gql\`
    mutation updateUserSecretByUserIdAndNameMutation($id: UUID, $userId: UUID!, $name: String!, $value: String) {
      updateUserSecretByUserIdAndName(input: {userId: $userId, name: $name, patch: {id: $id, value: $value}}) {
        userSecret {
          id
          userId
          name
          value
        }
      }
    }\`;",
  "updateUserSecretMutation": "export const updateUserSecretMutation = gql\`
    mutation updateUserSecretMutation($id: UUID!, $userId: UUID, $name: String, $value: String) {
      updateUserSecret(input: {id: $id, patch: {userId: $userId, name: $name, value: $value}}) {
        userSecret {
          id
          userId
          name
          value
        }
      }
    }\`;",
  "userEncryptedSecretsUpsertMutation": "export const userEncryptedSecretsUpsertMutation = gql\`
    mutation userEncryptedSecretsUpsertMutation($vUserId: UUID!, $secretName: String!, $secretValue: String!, $fieldEncoding: String!) {
      userEncryptedSecretsUpsert(input: {vUserId: $vUserId, secretName: $secretName, secretValue: $secretValue, fieldEncoding: $fieldEncoding}) {
        boolean
      }
    }\`;",
  "uuidGenerateSeededUuidMutation": "export const uuidGenerateSeededUuidMutation = gql\`
    mutation uuidGenerateSeededUuidMutation($seed: String!) {
      uuidGenerateSeededUuid(input: {seed: $seed}) {
        uuid
      }
    }\`;",
  "uuidGenerateV4Mutation": "export const uuidGenerateV4Mutation = gql\`
    mutation uuidGenerateV4Mutation {
      uuidGenerateV4 {
        uuid
      }
    }\`;",
}
`;
