// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createOne test1 1`] = `
"mutation createProductMutation($id: UUID, $ownerId: UUID, $name: String!, $rhinoFoot: String, $hiddenFoot: String, $lizardFeet: String) {
  createProduct(input: {product: {id: $id, ownerId: $ownerId, name: $name, rhinoFoot: $rhinoFoot, hiddenFoot: $hiddenFoot, lizardFeet: $lizardFeet}}) {
    product {
      id
      ownerId
      name
      rhinoFoot
      hiddenFoot
      lizardFeet
    }
  }
}
"
`;

exports[`crudify 1`] = `
Object {
  "createMerchantMutation": "mutation createMerchantMutation($id: String, $name: String!) {
  createMerchant(input: {merchant: {id: $id, name: $name}}) {
    merchant {
      id
      name
    }
  }
}
",
  "createProductMutation": "mutation createProductMutation($id: String, $merchantId: String, $name: String!, $description: String, $price: BigFloat) {
  createProduct(input: {product: {id: $id, merchantId: $merchantId, name: $name, description: $description, price: $price}}) {
    product {
      id
      merchantId
      name
      description
      price
    }
  }
}
",
  "createUserMutation": "mutation createUserMutation($id: String, $name: String!, $email: String!, $password: String!) {
  createUser(input: {user: {id: $id, name: $name, email: $email, password: $password}}) {
    user {
      id
      name
      email
      password
    }
  }
}
",
  "deleteMerchantMutation": "mutation deleteMerchantMutation($id: String!) {
  deleteMerchant(input: {id: $id}) {
    merchant {
      id
      name
    }
  }
}
",
  "deleteProductMutation": "mutation deleteProductMutation($id: String!) {
  deleteProduct(input: {id: $id}) {
    product {
      id
      merchantId
      name
      description
      price
    }
  }
}
",
  "deleteUserMutation": "mutation deleteUserMutation($id: String!) {
  deleteUser(input: {id: $id}) {
    user {
      id
      name
      email
      password
    }
  }
}
",
  "getMerchantQuery": "query getMerchantQuery($id: String!) {
  merchant(id: $id) {
    id
    name
  }
}
",
  "getMerchantsQuery": "query getMerchantsQuery {
  merchants {totalCount, nodes: {
    id
    name
  }}
}
",
  "getProductQuery": "query getProductQuery($id: String!) {
  product(id: $id) {
    id
    merchantId
    name
    description
    price
  }
}
",
  "getProductsByMerchantIdQuery": "query getProductsByMerchantIdQuery($merchantId: String!) {
  products(condition: {merchantId: $merchantId}) {totalCount, nodes: {
    id
    merchantId
    name
    description
    price
  }}
}
",
  "getProductsQuery": "query getProductsQuery {
  products {totalCount, nodes: {
    id
    merchantId
    name
    description
    price
  }}
}
",
  "getUserQuery": "query getUserQuery($id: String!) {
  user(id: $id) {
    id
    name
    email
    password
  }
}
",
  "getUsersQuery": "query getUsersQuery {
  users {totalCount, nodes: {
    id
    name
    email
    password
  }}
}
",
  "updateMerchantMutation": "mutation updateMerchantMutation($id: String!, $name: String) {
  updateMerchant(input: {id: $id, patch: {name: $name}}) {
    merchant {
      id
      name
    }
  }
}
",
  "updateProductMutation": "mutation updateProductMutation($id: String!, $merchantId: String, $name: String, $description: String, $price: BigFloat) {
  updateProduct(input: {id: $id, patch: {merchantId: $merchantId, name: $name, description: $description, price: $price}}) {
    product {
      id
      merchantId
      name
      description
      price
    }
  }
}
",
  "updateUserMutation": "mutation updateUserMutation($id: String!, $name: String, $email: String, $password: String) {
  updateUser(input: {id: $id, patch: {name: $name, email: $email, password: $password}}) {
    user {
      id
      name
      email
      password
    }
  }
}
",
}
`;

exports[`deleteOne test1 1`] = `
"mutation deleteProductMutation($id: UUID!) {
  deleteProduct(input: {id: $id}) {
    product {
      id
      ownerId
      name
      rhinoFoot
      hiddenFoot
      lizardFeet
    }
  }
}
"
`;

exports[`getMany test1 1`] = `
"query getProductsQuery {
  products {totalCount, nodes: {
    id
    ownerId
    name
    rhinoFoot
    hiddenFoot
    lizardFeet
  }}
}
"
`;

exports[`getManyOwned test1 1`] = `
"query getProductsByOwnerIdQuery($ownerId: UUID!) {
  products(condition: {ownerId: $ownerId}) {totalCount, nodes: {
    id
    ownerId
    name
    rhinoFoot
    hiddenFoot
    lizardFeet
  }}
}
"
`;

exports[`getOne test1 1`] = `
"query getProductQuery($id: UUID!) {
  product(id: $id) {
    id
    ownerId
    name
    rhinoFoot
    hiddenFoot
    lizardFeet
  }
}
"
`;

exports[`updateOne test1 1`] = `
"mutation updateProductMutation($id: UUID!, $ownerId: UUID, $name: String, $rhinoFoot: String, $hiddenFoot: String, $lizardFeet: String) {
  updateProduct(input: {id: $id, patch: {ownerId: $ownerId, name: $name, rhinoFoot: $rhinoFoot, hiddenFoot: $hiddenFoot, lizardFeet: $lizardFeet}}) {
    product {
      id
      ownerId
      name
      rhinoFoot
      hiddenFoot
      lizardFeet
    }
  }
}
"
`;
